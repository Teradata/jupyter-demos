{
    "name": "notebooks",
    "demos": [
        {
            "id": 2,
            "demo": "4D Analytics on bike sharing",
            "description": "Demonstration of Geospatial and TimeSeries using Austin bike trip data between 2014 and 2017.",
            "subjects": [
                {
                    "id": 2,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 2,
                    "subject": "Geospatial"
                },
                {
                    "id": 2,
                    "subject": "Time series analytics"
                },
                {
                    "id": 2,
                    "subject": "Python"
                },
                {
                    "id": 2,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/4D_Analytics_on_bike_sharing/Pop_4D_Analytics_on_bike_sharing_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/4D_Analytics_on_bike_sharing/4D_Analytics_on_bike_sharing_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/4D_Analytics_on_bike_sharing/Pop_4D_Analytics_on_bike_sharing_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/4D_Analytics_on_bike_sharing/4D_Analytics_on_bike_sharing_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 298,
            "demo": "ACF and PACF Functions in Vantage",
            "description": "Convert time series data and then normalize it. Then calculate the partial autocorrelation coefficients using the LEVINSON_DURBIN algorithm.",
            "subjects": [
                {
                    "id": 298,
                    "subject": "Python"
                },
                {
                    "id": 298,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 298,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ACF_PACF.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 225,
            "demo": "Advertising Sales Prediction using teradataml OpenSourceML in Vantage",
            "description": "Predict sales for multiple channels using Open-Source Machine Learning Functions",
            "subjects": [
                {
                    "id": 225,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 225,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Advertising_Sales_Prediction_OpenSourceML/Advertising_Sales_Prediction_Using_OpensourceML.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 39,
            "demo": "Air Passenger Forecasting",
            "description": "Applies Auto Regressive Integrated Moving Average (ARIMA) analysis to forecast airplane passenger volume.",
            "subjects": [
                {
                    "id": 39,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 39,
                    "subject": "Time series analytics"
                },
                {
                    "id": 39,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Air_Passenger_Forecasting/Air_Passenger_Forecasting_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Air_Passenger_Forecasting/Pop_Air_Passenger_Forecasting_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 370,
            "demo": "An Introduction to Parallel CPU Inferencing of HuggingFace Models in Vantage",
            "description": "Select a HuggingFace model, export the model into the database in ONNX format and then use Parallel inferencing in the database.",
            "subjects": [
                {
                    "id": 370,
                    "subject": "New"
                },
                {
                    "id": 370,
                    "subject": "Python"
                },
                {
                    "id": 370,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 370,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 370,
                    "subject": "Hugging Face"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_Complaints_Analysis_InVantage/Initialization_and_Model_Load.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 356,
            "demo": "Analysis of NBA BasketBall Data",
            "description": "Use Language Modeling to return answers to common NBA Statistics questions for a single game or questions about players over several years.",
            "subjects": [
                {
                    "id": 356,
                    "subject": "Python"
                },
                {
                    "id": 356,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/BasketBall_Analysis/NBA_Data_Analysis_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 106,
            "demo": "Anomaly Detection",
            "description": "Evaluates potential failures in spot welds based on voltage anomalies during the welding process.",
            "subjects": [
                {
                    "id": 106,
                    "subject": "Anomaly Detection"
                },
                {
                    "id": 106,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 106,
                    "subject": "Automotive"
                },
                {
                    "id": 106,
                    "subject": "Manufacturing"
                },
                {
                    "id": 106,
                    "subject": "Machine Learning"
                },
                {
                    "id": 106,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Anomaly_Detection/Pop_Anomaly_Detection_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Anomaly_Detection/Anomaly_Detection_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "Web",
                    "url": "https://storage.googleapis.com/clearscape_analytics_videos/ClearScape%20Analytics%20Experience%20-%20Anomaly%20Detection%20Use%20Case%20Demo%20-%20External%20-%20SP004519.MP4",
                    "label": "Video"
                }
            ]
        },
        {
            "id": 177,
            "demo": "Anomaly Detection in Spot Welding Process - Trusted AI",
            "description": "Evaluates potential failures in spot welds based on voltage anomalies during the welding process.",
            "subjects": [
                {
                    "id": 177,
                    "subject": "Manufacturing"
                },
                {
                    "id": 177,
                    "subject": "Machine Learning"
                },
                {
                    "id": 177,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 177,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Anomaly_Detection/Anomaly_Detection_Python_TrustedAI.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 164,
            "demo": "Anomaly Detection of Outstanding Amounts",
            "description": "Anomaly detection in bank accounts can help in identifying unusual patterns, potentially flagging issues like errors or fraudulent activities.  Enterprise re-use of Features ensures rapid creation & deployment of models while new Features can be created and used without extensive engineering support.",
            "subjects": [
                {
                    "id": 164,
                    "subject": "Anomaly Detection"
                },
                {
                    "id": 164,
                    "subject": "Financial"
                },
                {
                    "id": 164,
                    "subject": "Enterprise Feature Store"
                },
                {
                    "id": 164,
                    "subject": "Python"
                },
                {
                    "id": 164,
                    "subject": "Machine Learning"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/AnomalyDetection_OutstandingAmount_FS/AnomalyDetection_OutstandingAmount_FeatureStore.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 263,
            "demo": "Antiselect function in Vantage",
            "description": "Return all columns except those specified in an exclude parameter.",
            "subjects": [
                {
                    "id": 263,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 263,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Antiselect.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 309,
            "demo": "Arima Functions in Vantage",
            "description": "Execute the Arima Functions: ArimaEstimate, ArimaValidate, and ArimaForecast and use teradataml to create graphs with results.",
            "subjects": [
                {
                    "id": 309,
                    "subject": "Python"
                },
                {
                    "id": 309,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 309,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Arima.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 272,
            "demo": "Attribution Function in Vantage",
            "description": "Use the Attribution function to assign scores to events that will then  be inserted in an Attribution Model.",
            "subjects": [
                {
                    "id": 272,
                    "subject": "Python"
                },
                {
                    "id": 272,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Attribution.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 301,
            "demo": "Augmented Call Center: Revolutionizing Customer Support with Advanced AI Technologies",
            "description": "Experience the next generation of customer support with our Augmented Call Center. Harness the power of advanced AI technologies to deliver exceptional service, drive customer loyalty, and achieve operational excellence.",
            "subjects": [
                {
                    "id": 301,
                    "subject": "Python"
                },
                {
                    "id": 301,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 301,
                    "subject": "OpenAI"
                },
                {
                    "id": 301,
                    "subject": "LangChain"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Augmented_call_center_AgenticAI/Augmented_call_center_AgenticAI.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 229,
            "demo": "Automatic Data Pre-Processing with tdprepview",
            "description": "Prepare datasets for tabular supervised or unsupervised machine learning. Prepare data to predict customer churn for a bank.",
            "subjects": [
                {
                    "id": 229,
                    "subject": "Feature Engineering"
                },
                {
                    "id": 229,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 229,
                    "subject": "Finance"
                },
                {
                    "id": 229,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/tdprepview/Automatic_DataPreprocessing_tdprepview.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 184,
            "demo": "Banking Churn Prediction with AutoML",
            "description": "Implement the entire lifecycle of churn prediction using BYOM, VAL and AutoML.",
            "subjects": [
                {
                    "id": 184,
                    "subject": "AutoML"
                },
                {
                    "id": 184,
                    "subject": "Financial"
                },
                {
                    "id": 184,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Banking_Customer_Churn_AutoML/Banking_AutoML.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 92,
            "demo": "Banking Customer Churn",
            "description": "Uses a combination of Vantage Analytics Library to prepare data, using machine learning in python and importing the resulting PMML model into Vantage for scoring.",
            "subjects": [
                {
                    "id": 92,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 92,
                    "subject": "Financial"
                },
                {
                    "id": 92,
                    "subject": "Machine Learning"
                },
                {
                    "id": 92,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Banking_Customer_Churn/Pop_Banking_Customer_Churn_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Banking_Customer_Churn/Banking_Customer_Churn_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 354,
            "demo": "Banking Customer Churn Analysis using AutoML with a JSON Parameter File",
            "description": "Use Automated Machine Learning to automate the entire process of developing a predictive model by saving parameters into a JSON file and then execute the model to create a Prediction and a ROC curve. ",
            "subjects": [
                {
                    "id": 354,
                    "subject": "Python"
                },
                {
                    "id": 354,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Banking_Churn_AutoML_JSON/Banking_Churn_AutoML_JSON.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 79,
            "demo": "Basic Jupyter Navigation",
            "description": "When running a Jupyter Notebook, there are various indicators that show what is happening. This is a guide to those indicators.",
            "subjects": [
                {
                    "id": 79,
                    "subject": "First Time User"
                },
                {
                    "id": 79,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Basic_Jupyter_Navigation/Basic_Jupyter_Navigation_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/Basic_Jupyter_Navigation/Pop_Basic_Jupyter_Navigation_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 58,
            "demo": "Battery Defect Analysis",
            "description": "Uses local data (or foreign tables on GCP) to analyze patterns of battery failure, then links to data on AWS for detailed battery measurement.",
            "subjects": [
                {
                    "id": 58,
                    "subject": "Automotive"
                },
                {
                    "id": 58,
                    "subject": "Object Storage"
                },
                {
                    "id": 58,
                    "subject": "Manufacturing"
                },
                {
                    "id": 58,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Battery_Defect_Analysis/Battery_Defect_Analysis_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 276,
            "demo": "BinaryMatrixOP Function in Vantage",
            "description": "use the BinaryMatrixOp to perform multiplication operation in MATCH mode between two matrices holding REAL payload.",
            "subjects": [
                {
                    "id": 276,
                    "subject": "Python"
                },
                {
                    "id": 276,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/BinaryMatrixOp.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 275,
            "demo": "BinarySeriesOp Function in Vantage",
            "description": "Use BinarySeriesOp to convolve two series with digital signal processing.",
            "subjects": [
                {
                    "id": 275,
                    "subject": "Python"
                },
                {
                    "id": 275,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/BinarySeriesOp.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 264,
            "demo": "BincodeFit and BincodeTransform functions in Vantage",
            "description": "Transform continuous data into bins.  Then apply the transformation to a DataFrame.",
            "subjects": [
                {
                    "id": 264,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 264,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/BincodeFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 323,
            "demo": "BreuschGodfrey Function in Vantage",
            "description": "Check for the presence of serial correlation among the residual and error terms after running a regression associated with a fitted model.",
            "subjects": [
                {
                    "id": 323,
                    "subject": "Python"
                },
                {
                    "id": 323,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/BreuschGodfrey.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 324,
            "demo": "BreuschPaganGodfrey Function in Vantage",
            "description": "Detect the presence of variability of the error term during regression analysis. Observe the difference between observed values and predicted values, is not constant across all levels of the independent variables.",
            "subjects": [
                {
                    "id": 324,
                    "subject": "Python"
                },
                {
                    "id": 324,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/BreuschPaganGodfrey.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 82,
            "demo": "Broken Digital Journey",
            "description": "This uses nPath\u00ae analysis to show the retail events that prevent the ultimate objective: a purchase.  This uses interactive Sankey diagrams to understand the problems.",
            "subjects": [
                {
                    "id": 82,
                    "subject": "Retail"
                },
                {
                    "id": 82,
                    "subject": "Path Analytics"
                },
                {
                    "id": 82,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Broken_Digital_Journey/Pop_Broken_Digital_Journey_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Broken_Digital_Journey/Broken_Digital_Journey_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "Web",
                    "url": "https://storage.googleapis.com/clearscape_analytics_videos/Broken%20Digital%20Journeys%20CX%20Solution%20Accelerator%20Demo%20via%20Python%20Video%20-%20External%20-%20SP004183%20(1).MP4",
                    "label": "Video"
                }
            ]
        },
        {
            "id": 160,
            "demo": "Cancer Prediction using Teradata and the SageMaker API",
            "description": "Use the Vantage SageMaker API feature to connect to an Amazon Endpoint to orchestrate Extreme Gradient XG Boost model training and score the model in SageMaker.  Deploy the solution's ML model.",
            "subjects": [
                {
                    "id": 160,
                    "subject": "AWS SageMaker"
                },
                {
                    "id": 160,
                    "subject": "Healthcare"
                },
                {
                    "id": 160,
                    "subject": "Machine Learning"
                },
                {
                    "id": 160,
                    "subject": "Prediction Analysis"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/CancerPrediction_TDApiClient/CancerPrediction_tdapiClient_Sagemaker.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 167,
            "demo": "Cancer Prediction using the TDAPIClient and VertexAI",
            "description": "Use TDAPIClient to connect to the Google Cloud Vertex API Endpoint to orchestrate Extreme Gradient XG Boost model training and score the model in SageMaker. Deploy the solution's ML model.",
            "subjects": [
                {
                    "id": 167,
                    "subject": "Healthcare"
                },
                {
                    "id": 167,
                    "subject": "Machine Learning"
                },
                {
                    "id": 167,
                    "subject": "Prediction Analysis"
                },
                {
                    "id": 167,
                    "subject": "Python"
                },
                {
                    "id": 167,
                    "subject": "Vertex AI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/CancerPrediction_TDApiClient/CancerPrediction_tdapiClient_VertexAI_CustomModel.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 103,
            "demo": "Car Complaints",
            "description": "Uses geospatial techniques to locate service centers close to the complaint and outlier detection to detect part defects earlier than expected.",
            "subjects": [
                {
                    "id": 103,
                    "subject": "Automotive"
                },
                {
                    "id": 103,
                    "subject": "Geospatial"
                },
                {
                    "id": 103,
                    "subject": "Manufacturing"
                },
                {
                    "id": 103,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Car_Complaints/Pop_Car_Complaints_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Car_Complaints/Car_Complaints_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 71,
            "demo": "Carbon Footprint Analytics",
            "description": "A key component of ESG is Carbon Footprint. This demonstrates a part of a solution available from Teradata to integrate multiple data sources to calculate carbon footprint of various corporate activities.",
            "subjects": [
                {
                    "id": 71,
                    "subject": "Time series analytics"
                },
                {
                    "id": 71,
                    "subject": "Energy & Natural Resources"
                },
                {
                    "id": 71,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Carbon_Footprint_Analytics/Pop_Carbon_Footprint_Analytics_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Carbon_Footprint_Analytics/Carbon_Footprint_Analytics_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 114,
            "demo": "Cash Demand Forecasing",
            "description": "Predicts the future demand for cast in Automatic Teller Machines (ATMs) using Auto Regressive Integrated Moving Average  (ARIMA) using In-Database functions.",
            "subjects": [
                {
                    "id": 114,
                    "subject": "Time series analytics"
                },
                {
                    "id": 114,
                    "subject": "Financial"
                },
                {
                    "id": 114,
                    "subject": "ARIMA"
                },
                {
                    "id": 114,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Cash_Demand_Forecasting/Cash_Demand_Forecasting_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Cash_Demand_Forecasting/Pop_Cash_Demand_Forecasting_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 239,
            "demo": "CategoricalSummary function in Vantage",
            "description": "Display distinct values and counts for a column in a Banking dataset",
            "subjects": [
                {
                    "id": 239,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 239,
                    "subject": "Finance"
                },
                {
                    "id": 239,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/CategoricalSummary.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 62,
            "demo": "Charting and Visualization",
            "description": "Data from queries is brought to life with graphics and charts. This shows how to use the %chart magic command to display results.",
            "subjects": [
                {
                    "id": 62,
                    "subject": "Developer Information"
                },
                {
                    "id": 62,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Charting_and_Visualization/Charting_and_Visualization_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/Charting_and_Visualization/Pop_Charting_and_Visualization_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 163,
            "demo": "Charting and Visualizations using teradataml",
            "description": "The td_plot method streamlines large-scale visualizations by providing users with efficient tools to create visualizations directly within the Vantage platform",
            "subjects": [
                {
                    "id": 163,
                    "subject": "Developer Information"
                },
                {
                    "id": 163,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Charting_and_Visualization/InDB_Visualizations_using_teradataml.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 368,
            "demo": "Chat with VantageCloud Lake Using the Google ADK and the Teradata MCP Server",
            "description": "Use the Google ADK to connect to the Teradata MCP Server and ask questions about the databases in our VantageCloud Lake database.",
            "subjects": [
                {
                    "id": 368,
                    "subject": "New"
                },
                {
                    "id": 368,
                    "subject": "Python"
                },
                {
                    "id": 368,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 368,
                    "subject": "Vantage Cloud Lake"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Chat_with_Teradata_MCP_Server/Chat_with_Teradata_MCP_Server_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 146,
            "demo": "Chatbot using GenAI with insurance PDF document",
            "description": "Uses TD_VectorDistance in Vantage to create a chatbot using Retrieval-Augmented Generation (RAG),  Langchain, and LLM to answer questions using a 24 page travelers insurance policy PDF as source data to answer questions about coverage.",
            "subjects": [
                {
                    "id": 146,
                    "subject": "Generative AI"
                },
                {
                    "id": 146,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 146,
                    "subject": "Python"
                },
                {
                    "id": 146,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Chat_with_docs_GenAI/Chat_with_docs_OpenSource_GenAI_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 374,
            "demo": "Chatbot using Vantage & GenAI with Insurance PDF document",
            "description": "Uses TD_VectorDistance in Vantage to create a chatbot using RAG, Langchain, and LLM to answer questions using a travelers insurance policy PDF.\"",
            "subjects": [
                {
                    "id": 374,
                    "subject": "New"
                },
                {
                    "id": 374,
                    "subject": "SQL"
                },
                {
                    "id": 374,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 374,
                    "subject": "Possible 2025"
                },
                {
                    "id": 374,
                    "subject": "Travel & Transportation"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Chat_with_docs_GenAI/Chat_with_docs_VantageDB_GenAI_Python.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 345,
            "demo": "ClassificationEvaluator Function in Vantage",
            "description": "Compute evaluation metrics to compare multiple classification models and summarize how close predictions are to their expected values.",
            "subjects": [
                {
                    "id": 345,
                    "subject": "Python"
                },
                {
                    "id": 345,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ClassificationEvaluator.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 240,
            "demo": "ColumnSummary function in Vantage",
            "description": "Summarize a column and return standard values like positive, negative, nulls, zeros, etc.",
            "subjects": [
                {
                    "id": 240,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 240,
                    "subject": "Finance"
                },
                {
                    "id": 240,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ColumnSummary.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 346,
            "demo": "ColumnTransformer Function in Vantage",
            "description": "Transform input data columns in a single operation by providing only the FIT dataframes generated by the analytic functions and then runs all the transformations in a single operation.",
            "subjects": [
                {
                    "id": 346,
                    "subject": "Python"
                },
                {
                    "id": 346,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ColumnTransformer.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 136,
            "demo": "Competitor Proximity Geospatial Analysis",
            "description": "This looks at the impact on purchasing when people that shop at our stores live within reasonable drive time to a competitor. This could identify proximity based marketing tactics to target larger promotions to those customers to increase share of their spend.",
            "subjects": [
                {
                    "id": 136,
                    "subject": "Hypothesis testing"
                },
                {
                    "id": 136,
                    "subject": "Geospatial"
                },
                {
                    "id": 136,
                    "subject": "Retail"
                },
                {
                    "id": 136,
                    "subject": "Marketing"
                },
                {
                    "id": 136,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Competitor_Proximity_Geospatial_Analysis/Pop_Competitor_Proximity_Geospatial_Analysis_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Competitor_Proximity_Geospatial_Analysis/Competitor_Proximity_Geospatial_Analysis_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 197,
            "demo": "Complaints Classification with AWS Bedrock",
            "description": "Classify customer complaints to swiftly identify and address concerns.",
            "subjects": [
                {
                    "id": 197,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 197,
                    "subject": "AWS"
                },
                {
                    "id": 197,
                    "subject": "Complaint Summarization"
                },
                {
                    "id": 197,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 197,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Complaints_Classification.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Complaints_Classification.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 202,
            "demo": "Complaints Classification with Google Gemini",
            "description": "Classify customer complaints to swiftly identify and address concerns.",
            "subjects": [
                {
                    "id": 202,
                    "subject": "Google"
                },
                {
                    "id": 202,
                    "subject": "Google Gemini"
                },
                {
                    "id": 202,
                    "subject": "Large Language Models"
                },
                {
                    "id": 202,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 202,
                    "subject": "Python"
                },
                {
                    "id": 202,
                    "subject": "Complaints Classification"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Complaints_Classification.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Complaints_Classification.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 210,
            "demo": "Complaints Classification with OpenAI",
            "description": "Classify customer complaints to swiftly identify and address concerns.",
            "subjects": [
                {
                    "id": 210,
                    "subject": "Generative AI"
                },
                {
                    "id": 210,
                    "subject": "Large Language Models"
                },
                {
                    "id": 210,
                    "subject": "Python"
                },
                {
                    "id": 210,
                    "subject": "Azure"
                },
                {
                    "id": 210,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 210,
                    "subject": "OpenAI"
                },
                {
                    "id": 210,
                    "subject": "Complaints Classification"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Complaints_Classification.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Complaints_Classification.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 198,
            "demo": "Complaints Clustering with AWS Bedrock",
            "description": "Use advanced clustering techniques using AI Embeddings model to group similar customer complaints together.",
            "subjects": [
                {
                    "id": 198,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 198,
                    "subject": "AWS"
                },
                {
                    "id": 198,
                    "subject": "Python"
                },
                {
                    "id": 198,
                    "subject": "Large Language Models"
                },
                {
                    "id": 198,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 198,
                    "subject": "Complaints Clustering"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Complaints_Clustering.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Complaints_Clustering.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 203,
            "demo": "Complaints Clustering with Google Gemini",
            "description": "Use advanced clustering techniques using AI Embeddings model to group similar customer complaints together.",
            "subjects": [
                {
                    "id": 203,
                    "subject": "Google"
                },
                {
                    "id": 203,
                    "subject": "Google Gemini"
                },
                {
                    "id": 203,
                    "subject": "Large Language Models"
                },
                {
                    "id": 203,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 203,
                    "subject": "Python"
                },
                {
                    "id": 203,
                    "subject": "Generative AI"
                },
                {
                    "id": 203,
                    "subject": "Complaints Clustering"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Complaints_Clustering.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Complaints_Clustering.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 211,
            "demo": "Complaints Clustering with OpenAI",
            "description": "Use advanced clustering techniques using AI Embeddings model to group similar customer complaints together.",
            "subjects": [
                {
                    "id": 211,
                    "subject": "Generative AI"
                },
                {
                    "id": 211,
                    "subject": "Large Language Models"
                },
                {
                    "id": 211,
                    "subject": "Python"
                },
                {
                    "id": 211,
                    "subject": "Azure"
                },
                {
                    "id": 211,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 211,
                    "subject": "OpenAI"
                },
                {
                    "id": 211,
                    "subject": "Complaints Clustering"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Complaints_Clustering.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Complaints_Clustering.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 196,
            "demo": "Complaints Summarization with AWS Bedrock",
            "description": "Efficiently manage and analyze customer complaints, providing actionable insights to enhance customer satisfaction and improve business operations.",
            "subjects": [
                {
                    "id": 196,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 196,
                    "subject": "AWS"
                },
                {
                    "id": 196,
                    "subject": "Large Language Models"
                },
                {
                    "id": 196,
                    "subject": "Complaint Summarization"
                },
                {
                    "id": 196,
                    "subject": "Customer Complaint Analysis"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Complaint_Summarization.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Complaint_Summarization.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 201,
            "demo": "Complaints Summarization with Google Gemini",
            "description": "Efficiently manage and analyze customer complaints, providing actionable insights to enhance customer satisfaction and improve business operations.",
            "subjects": [
                {
                    "id": 201,
                    "subject": "Google"
                },
                {
                    "id": 201,
                    "subject": "Google Gemini"
                },
                {
                    "id": 201,
                    "subject": "Large Language Models"
                },
                {
                    "id": 201,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 201,
                    "subject": "Python"
                },
                {
                    "id": 201,
                    "subject": "Complaint Summarization"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Complaint_Summarization.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Complaint_Summarization.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 209,
            "demo": "Complaints Summarization with OpenAI",
            "description": "Efficiently manage and analyze customer complaints, providing actionable insights to enhance customer satisfaction and improve business operations.",
            "subjects": [
                {
                    "id": 209,
                    "subject": "Generative AI"
                },
                {
                    "id": 209,
                    "subject": "Large Language Models"
                },
                {
                    "id": 209,
                    "subject": "Python"
                },
                {
                    "id": 209,
                    "subject": "Azure"
                },
                {
                    "id": 209,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 209,
                    "subject": "OpenAI"
                },
                {
                    "id": 209,
                    "subject": "Complaint Summarization"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Complaint_Summarization.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Complaint_Summarization.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 7,
            "demo": "Consumer Complaints",
            "description": "Uses government consumer complaint data with SQL queries and visualizations to identify source of top complaints.",
            "subjects": [
                {
                    "id": 7,
                    "subject": "Time series analytics"
                },
                {
                    "id": 7,
                    "subject": "Financial"
                },
                {
                    "id": 7,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Consumer_Complaints/Pop_Consumer_Complaints_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Consumer_Complaints/Consumer_Complaints_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 173,
            "demo": "Convert PySpark to teradatamlspk",
            "description": "Convert a PySpark script to teradatamlspk syntax and generate a HTML report using Housing Prices to generate price predictions.",
            "subjects": [
                {
                    "id": 173,
                    "subject": "Developer Information"
                },
                {
                    "id": 173,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/PySpark_to_Teradataml/HousingPrices_pyspark_to_tdml.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 307,
            "demo": "ConvertTo Function in Vantage",
            "description": "Convert data types in columns of a source table into other data types without using complicated format strings.",
            "subjects": [
                {
                    "id": 307,
                    "subject": "Python"
                },
                {
                    "id": 307,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ConvertTo.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 291,
            "demo": "Convolve Function in Vantage",
            "description": "Use this function to convolve two series into new time series using the CONV_DFFT algorithm.",
            "subjects": [
                {
                    "id": 291,
                    "subject": "Python"
                },
                {
                    "id": 291,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 291,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Convolve.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 292,
            "demo": "Convolve2 Function in Vantage",
            "description": "Convolve 2 matching payload fields of 2 matrices into a new source matrix.",
            "subjects": [
                {
                    "id": 292,
                    "subject": "Python"
                },
                {
                    "id": 292,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 292,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Convolve2.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 234,
            "demo": "Create a Workshop version of a Notebook",
            "description": "Use OpenAI to convert code cells into interactive exercises with solutions that can be collapsed or expanded.",
            "subjects": [
                {
                    "id": 234,
                    "subject": "Python"
                },
                {
                    "id": 234,
                    "subject": "OpenAI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/Creating_Workshop_Notebooks/Creating_Workshop_Notebooks.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 147,
            "demo": "Credit Card Data Preparation",
            "description": "Uses functions from TeradataML Python library to prepare data for analysis using data cleansing, exploration and feature engineering functions.",
            "subjects": [
                {
                    "id": 147,
                    "subject": "Data Preparation"
                },
                {
                    "id": 147,
                    "subject": "Financial"
                },
                {
                    "id": 147,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Credit_Card_Data_Preparation/Credit_Card_Data_Preparation_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 60,
            "demo": "Credit Card Data Preparation",
            "description": "This shows the use of ClearScape analytics to reduce the pre-processing effort of incoming raw credit card data to prepare for analysis of potential loan defaulters.",
            "subjects": [
                {
                    "id": 60,
                    "subject": "Data Preparation"
                },
                {
                    "id": 60,
                    "subject": "Financial"
                },
                {
                    "id": 60,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Credit_Card_Data_Preparation/Credit_Card_Data_Preparation_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Credit_Card_Data_Preparation/Pop_Credit_Card_Data_Preparation_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 172,
            "demo": "Credit Risk Assessment using Teradataml OpenSource Functions",
            "description": "Use inDb functions with OpensourceML to create multiple DecisionTreeClassifiers to create multiple predictions of a Credit Risk Assessment.",
            "subjects": [
                {
                    "id": 172,
                    "subject": "Financial"
                },
                {
                    "id": 172,
                    "subject": "Machine Learning"
                },
                {
                    "id": 172,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Credit_Risk_Assessment/Credit_Risk_Assessment_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 327,
            "demo": "CumulPeriodogram Function in Vantage",
            "description": "Use a cumulative periodogram statistics test to determine if any periodicities (seasonal cycles) exist in the residual series being tested.",
            "subjects": [
                {
                    "id": 327,
                    "subject": "Python"
                },
                {
                    "id": 327,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/CumulPeriodogram.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 139,
            "demo": "Customer 360",
            "description": "This integrates data about customers from multiple sources using multiple matching techniquest to create the \"Golden Customer Record\" and calculate LTV.",
            "subjects": [
                {
                    "id": 139,
                    "subject": "Text Analysis"
                },
                {
                    "id": 139,
                    "subject": "Marketing"
                },
                {
                    "id": 139,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Customer360/CustomerIdentityMatching_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Customer360/Pop_CustomerIdentityMatching_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 23,
            "demo": "Customer Behavior Analysis",
            "description": "Analysis of customer purchase behavior using nPath\u00ae analysis in Python with visualization using Sankey diagrams.",
            "subjects": [
                {
                    "id": 23,
                    "subject": "Path Analytics"
                },
                {
                    "id": 23,
                    "subject": "Retail"
                },
                {
                    "id": 23,
                    "subject": "SQL"
                },
                {
                    "id": 23,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Customer_Behavior_Analysis/Pop_Customer_Behavior_Analysis_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Customer_Behavior_Analysis/Customer_Behavior_Analysis_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Customer_Behavior_Analysis/Customer_Behavior_Analysis_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Customer_Behavior_Analysis/Pop_Customer_Behavior_Analysis_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 180,
            "demo": "Customer Complaint Analysis with AWS Bedrock",
            "description": "This is a collection of demos showing multiple methods of dealing with customer complaints using various GenAI techniques.",
            "subjects": [
                {
                    "id": 180,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 180,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 180,
                    "subject": "Python"
                },
                {
                    "id": 180,
                    "subject": "AWS"
                },
                {
                    "id": 180,
                    "subject": "Dashboard Notebook"
                },
                {
                    "id": 180,
                    "subject": "Large Language Models"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Complaint_Analysis_Dashboard.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Complaint_Analysis_Dashboard.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 191,
            "demo": "Customer Complaint Analysis with Google Gemini",
            "description": "This is a Dashboard with descriptions and links to various notebooks on various topics using Teradata Vantage and Google Gemini.",
            "subjects": [
                {
                    "id": 191,
                    "subject": "Google Gemini"
                },
                {
                    "id": 191,
                    "subject": "Python"
                },
                {
                    "id": 191,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 191,
                    "subject": "Google"
                },
                {
                    "id": 191,
                    "subject": "Dashboard Notebook"
                },
                {
                    "id": 191,
                    "subject": "Large Language Models"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Complaint_Analysis_Dashboard.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Complaint_Analysis_Dashboard.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 192,
            "demo": "Customer Complaints Analysis Dashboard with OpenAI",
            "description": "This is a Dashboard with descriptions and links to various notebooks on various topics using Teradata Vantage and Microsoft Azure.",
            "subjects": [
                {
                    "id": 192,
                    "subject": "OpenAI"
                },
                {
                    "id": 192,
                    "subject": "Azure"
                },
                {
                    "id": 192,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 192,
                    "subject": "Python"
                },
                {
                    "id": 192,
                    "subject": "Large Language Models"
                },
                {
                    "id": 192,
                    "subject": "Dashboard Notebook"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Complaint_Analysis_Dashboard.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Complaint_Analysis_Dashboard.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 193,
            "demo": "Customer Complaints Analysis with Customer360 with AWS Bedrock",
            "description": "Customer360 which is a comprehensive approach to managing customer complaints and feedback within the framework of a Customer 360-degree view",
            "subjects": [
                {
                    "id": 193,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 193,
                    "subject": "Python"
                },
                {
                    "id": 193,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 193,
                    "subject": "AWS"
                },
                {
                    "id": 193,
                    "subject": "Customer 360"
                },
                {
                    "id": 193,
                    "subject": "Large Language Models"
                },
                {
                    "id": 193,
                    "subject": "Topic Modelling"
                },
                {
                    "id": 193,
                    "subject": "Sentiment Analysis"
                },
                {
                    "id": 193,
                    "subject": "Possible 2025"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Complaint_Analysis_Customer360.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Complaint_Analysis_Customer360.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 200,
            "demo": "Customer Complaints Analysis with Customer360 with Google Gemini",
            "description": "Customer360 which is a comprehensive approach to managing customer complaints and feedback within the framework of a Customer 360-degree view",
            "subjects": [
                {
                    "id": 200,
                    "subject": "Google"
                },
                {
                    "id": 200,
                    "subject": "Google Gemini"
                },
                {
                    "id": 200,
                    "subject": "Large Language Models"
                },
                {
                    "id": 200,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 200,
                    "subject": "Customer 360"
                },
                {
                    "id": 200,
                    "subject": "Sentiment Analysis"
                },
                {
                    "id": 200,
                    "subject": "Topic Modelling"
                },
                {
                    "id": 200,
                    "subject": "Complaint Summarization"
                },
                {
                    "id": 200,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Complaint_Analysis_Customer360.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Complaint_Analysis_Customer360.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 208,
            "demo": "Customer Complaints Analysis with Customer360 with OpenAI",
            "description": "Customer360 which is a comprehensive approach to managing customer complaints and feedback within the framework of a Customer 360-degree view",
            "subjects": [
                {
                    "id": 208,
                    "subject": "Generative AI"
                },
                {
                    "id": 208,
                    "subject": "Large Language Models"
                },
                {
                    "id": 208,
                    "subject": "Python"
                },
                {
                    "id": 208,
                    "subject": "Azure"
                },
                {
                    "id": 208,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 208,
                    "subject": "OpenAI"
                },
                {
                    "id": 208,
                    "subject": "Customer 360"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Complaint_Analysis_Customer360.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Complaint_Analysis_Customer360.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 351,
            "demo": "Customer Retail Journeys",
            "description": "Use Clearscape Analytics functions to analyze customer digital behaviors and experiences in an effort to diagnose issues and events that could possibly inhibit their purchases.",
            "subjects": [
                {
                    "id": 351,
                    "subject": "Python"
                },
                {
                    "id": 351,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Retail_Journey/Customer_Retail_Journey.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 176,
            "demo": "Customer Reviews Analysis using GenAI",
            "description": "Customer reviews analysis is a crucial aspect of understanding customer sentiment and preferences. By leveraging the power of OpenAIEmbeddings and Vantage InDB Analytic Function, we can gain valuable insights from customer reviews.",
            "subjects": [
                {
                    "id": 176,
                    "subject": "Retail"
                },
                {
                    "id": 176,
                    "subject": "Generative AI"
                },
                {
                    "id": 176,
                    "subject": "Python"
                },
                {
                    "id": 176,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 176,
                    "subject": "OpenAI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Customer_reviews_analysis_using_GenAI/Customer_reviews_analysis_using_GenAI_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 186,
            "demo": "Customer Segmentation with K-means",
            "description": "Use K-means clustering to segment customers by purchase volume and value using R and tdplyr",
            "subjects": [
                {
                    "id": 186,
                    "subject": "R"
                },
                {
                    "id": 186,
                    "subject": "Prediction Analysis"
                },
                {
                    "id": 186,
                    "subject": "PCA (Principal Component Analysis)"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/K-Means_Clustering_and_ML_model/K-Means_Clustering_and_ML_model_R.ipynb",
                    "label": "R Version"
                }
            ]
        },
        {
            "id": 352,
            "demo": "Customer Segmentation with K-means Clustering and Data Preparation Pipelines",
            "description": "Leverage native Vantage processing for efficient and highly scalable data preparation, model training, and evaluation workflows.",
            "subjects": [
                {
                    "id": 352,
                    "subject": "Python"
                },
                {
                    "id": 352,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/K-Means_Clustering_and_ML_model/K-Means_Clustering_and_ML_model_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 284,
            "demo": "DFFT and IDFFT Functions in Vantage",
            "description": "This is an example of how to use DFFT() when convolving two series with digital signal processing.",
            "subjects": [
                {
                    "id": 284,
                    "subject": "Python"
                },
                {
                    "id": 284,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DFFT_IDFFT.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 285,
            "demo": "DFFT2 and IDFFT2 Functions in Vantage",
            "description": "Compute the two-dimension fourier transform using the input matrix with real numbers only for a matrix.",
            "subjects": [
                {
                    "id": 285,
                    "subject": "Python"
                },
                {
                    "id": 285,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DFFT2_IDFFT2.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 294,
            "demo": "DFFT2Conv Function in Vantage",
            "description": "Load time series data and then convert it into a TDMatrix.  Then compute the two-dimension fourier transform with only real numbers. Then convert the output to polar data in Radian format.",
            "subjects": [
                {
                    "id": 294,
                    "subject": "Python"
                },
                {
                    "id": 294,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DFFT2Conv.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 293,
            "demo": "DFFTConv Function in Vantage",
            "description": "Load time series data and then convert it into a TDSeries.  Then compute the Fourier Transform Coefficients and convert to polar data in Radian format.",
            "subjects": [
                {
                    "id": 293,
                    "subject": "Python"
                },
                {
                    "id": 293,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DFFTConv.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 256,
            "demo": "DIFF and UNDIFF functions in Vantage",
            "description": "Transform a stationary, seasonal, or non-stationary time series into a differenced time series and then reverse it.",
            "subjects": [
                {
                    "id": 256,
                    "subject": "Retail"
                },
                {
                    "id": 256,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 256,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DIFF_UNDIFF.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 314,
            "demo": "DTW Function in Vantage",
            "description": "Measure the similarity between two time series.",
            "subjects": [
                {
                    "id": 314,
                    "subject": "Python"
                },
                {
                    "id": 314,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DTW.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 268,
            "demo": "Data Analyst AI Agent with LangChain and Google Gemini",
            "description": "Create a text-to-SQL autonomous agent that will enable the retrieval of answers and insights from a database.",
            "subjects": [
                {
                    "id": 268,
                    "subject": "Python"
                },
                {
                    "id": 268,
                    "subject": "LangSmith"
                },
                {
                    "id": 268,
                    "subject": "Google Gemini"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Analyst_AI_Agent_Gemini/Data_Analyst_AI_Agent_Gemini.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 37,
            "demo": "Data Dictionary",
            "description": "This provides an index to all of the databases used by demo notebooks on this machine, allowing you to use that data for your own notebooks or BI tools.",
            "subjects": [
                {
                    "id": 37,
                    "subject": "Developer Information"
                },
                {
                    "id": 37,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Dictionary/Data_Dictionary.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 66,
            "demo": "Data Dictionary Raw",
            "description": "This provides linkage to a larger set of databases and tables than are currently used by the demos in Jupyter.",
            "subjects": [
                {
                    "id": 66,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Dictionary/Data_Dictionary_Raw.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 188,
            "demo": "Data Loading ('R')",
            "description": "Shows multiple ways to load data from local CSV files, and cloud files on Google and AWS using the SQL kernel.",
            "subjects": [
                {
                    "id": 188,
                    "subject": "Data Preparation"
                },
                {
                    "id": 188,
                    "subject": "Developer Information"
                },
                {
                    "id": 188,
                    "subject": "R"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Data_Loading/Data_Loading_R.ipynb",
                    "label": "R Version"
                }
            ]
        },
        {
            "id": 108,
            "demo": "Data Loading (Python)",
            "description": "Shows how to use python to load CSV data from local storage and from zipped files",
            "subjects": [
                {
                    "id": 108,
                    "subject": "Developer Information"
                },
                {
                    "id": 108,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Data_Loading/Data_Loading_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/Data_Loading/Pop_Data_Loading_Python.ipynb",
                    "label": "Read Only Python-SQL"
                }
            ]
        },
        {
            "id": 107,
            "demo": "Data Loading (SQL)",
            "description": "Shows multiple ways to load data from local CSV files, and cloud files on Google and AWS using the SQL kernel.",
            "subjects": [
                {
                    "id": 107,
                    "subject": "Developer Information"
                },
                {
                    "id": 107,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Data_Loading/Data_Loading_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/Data_Loading/Pop_Data_Loading_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 14,
            "demo": "Data Prep and Transformation",
            "description": "This demonstrates a subset of the over 100 analytic functions in the teradataml package for Python",
            "subjects": [
                {
                    "id": 14,
                    "subject": "Data Preparation"
                },
                {
                    "id": 14,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Prep_and_Transformation/Data_Prep_and_Transformation_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Data_Prep_and_Transformation/Pop_Data_Prep_and_Transformation_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Data_Prep_and_Transformation/Pop_Data_Prep_and_Transformation_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Prep_and_Transformation/Data_Prep_and_Transformation_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 170,
            "demo": "Data Quality Anomaly Detection using Statistical Techniques",
            "description": "Compare the distribution and variation of data between two time intervals usin In-DB function executed via a framework to provide alerts highlighting data anomalies.",
            "subjects": [
                {
                    "id": 170,
                    "subject": "Machine Learning"
                },
                {
                    "id": 170,
                    "subject": "Anomaly Detection"
                },
                {
                    "id": 170,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Quality_Anomaly_Detection/Data_Quality_Anomaly_Detection_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 16,
            "demo": "Data Science 101 with Python",
            "description": "This walks through the Cross-Industry Standard Process for Data Mining (CRISP-DM) from data understanding through modeling and evaluation.",
            "subjects": [
                {
                    "id": 16,
                    "subject": "Hypothesis testing"
                },
                {
                    "id": 16,
                    "subject": "Healthcare"
                },
                {
                    "id": 16,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Data_Science_101_with_Python/Pop_Data_Science_101_with_Python_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Data_Science_101_with_Python/Data_Science_101_with_Python_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 283,
            "demo": "DataRobotPredict Function in Vantage",
            "description": "Use this function to load a pre-built DataRobot Model into Vantage and then use it to score a dataset in the database.",
            "subjects": [
                {
                    "id": 283,
                    "subject": "Python"
                },
                {
                    "id": 283,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 283,
                    "subject": "DataRobot"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DataRobotPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 50,
            "demo": "Dataiku",
            "description": "Discusses how the 3rd party tool DataIku can be used with Vantage.",
            "subjects": [
                {
                    "id": 50,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 50,
                    "subject": "Dataiku"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Dataiku/Dataiku.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 331,
            "demo": "DecisionForest and TDDecisionForestPredict Functions in Vantage",
            "description": "Create predictive models based on the algorithm for decision tree training and prediction.  Then use those models to analyze the input data and make predictions.",
            "subjects": [
                {
                    "id": 331,
                    "subject": "Python"
                },
                {
                    "id": 331,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DecisionForestandTDDecisionForestPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 41,
            "demo": "Deep History via Object Store",
            "description": "This demonstrates integration of local data or foreign tables on GCP and integration across cloud providers to detailed historical sales records on AWS.",
            "subjects": [
                {
                    "id": 41,
                    "subject": "Object Storage"
                },
                {
                    "id": 41,
                    "subject": "Retail"
                },
                {
                    "id": 41,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Deep_History_via_Object_Store/Deep_History_via_Object_Store_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Deep_History_via_Object_Store/Pop_Deep_History_via_Object_Store_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 261,
            "demo": "Deploy a Hyper-Segmented Model Scikit Learn Pipeline",
            "description": "Deploy a hyper-segmented model created using the Python Scikit-Learn module and then load and run it in Vantage.",
            "subjects": [
                {
                    "id": 261,
                    "subject": "Model Pipelines"
                },
                {
                    "id": 261,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/HyperSegmented_Model_Pipelines/Deploy_HyperSegmented_Model_Pipeline.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 69,
            "demo": "Diabetes Prediction via BYOM H2O",
            "description": "This uses BYOM to import a trained H2O model to identify potential diabetes patients. BYOM allows the data scientist to create models in languages they prefer and run at scale inside Vantage without moving data.",
            "subjects": [
                {
                    "id": 69,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 69,
                    "subject": "Healthcare"
                },
                {
                    "id": 69,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Diabetes_Prediction/Diabetes_Prediction_via_BYOM_H2O_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Diabetes_Prediction/Pop_Diabetes_Prediction_via_BYOM_H2O_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                }
            ]
        },
        {
            "id": 68,
            "demo": "Diabetes Prediction via DF and GLM",
            "description": "Decision Forest and Generalized Linear Model are applied to identify factors that indicate diabetes. The earlier the disease is identified, the better the chance of reducing organ damage.",
            "subjects": [
                {
                    "id": 68,
                    "subject": "Healthcare"
                },
                {
                    "id": 68,
                    "subject": "Machine Learning"
                },
                {
                    "id": 68,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Diabetes_Prediction/Pop_Diabetes_Prediction_via_DF_and_GLM_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Diabetes_Prediction/Diabetes_Prediction_via_DF_and_GLM_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 320,
            "demo": "DickeyFuller Function in Vantage",
            "description": "Test data in a Time Series to determine if it is stationary or non-stationary.",
            "subjects": [
                {
                    "id": 320,
                    "subject": "Python"
                },
                {
                    "id": 320,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DickeyFuller.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 142,
            "demo": "Digital Identity Management",
            "description": "Combines ClearScape Analytics with Celebrus to track unique customers across web sessions and devices to drive personalized experiences",
            "subjects": [
                {
                    "id": 142,
                    "subject": "Financial"
                },
                {
                    "id": 142,
                    "subject": "Celebrus"
                },
                {
                    "id": 142,
                    "subject": "Marketing"
                },
                {
                    "id": 142,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Digital_Identity_Management/Pop_Digital_Identity_Management_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Digital_Identity_Management/Digital_Identity_Management_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 322,
            "demo": "DurbinWatson Function in Vantage",
            "description": "Determine if there is evidence of serial correlation between residuals in a residual series.",
            "subjects": [
                {
                    "id": 322,
                    "subject": "Python"
                },
                {
                    "id": 322,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/DurbinWatson.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 357,
            "demo": "End-to-End Demo for Customer Churn in Telco",
            "description": "Introduction to the traditional and automated approaches of building models to identify and predict customer churn.",
            "subjects": [
                {
                    "id": 357,
                    "subject": "Demo Introduction"
                },
                {
                    "id": 357,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Telco_Customer_Churn/Introduction_Teradata_End_to_End_Telco_Customer_Churn.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 361,
            "demo": "End-to-End Demo for Financial Fraud Detection using Vantage",
            "description": "Introduction to the traditional and automated approaches of building models to detect fraud.",
            "subjects": [
                {
                    "id": 361,
                    "subject": "Demo Introduction"
                },
                {
                    "id": 361,
                    "subject": "Finance"
                },
                {
                    "id": 361,
                    "subject": "End-to-End"
                },
                {
                    "id": 361,
                    "subject": "AutoML"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Financial_Fraud_Detection/Introduction_Teradata_End_to_End_Financial_Fraud_Detection.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 40,
            "demo": "Energy Consumption Forecasting",
            "description": "This combines machine learning and BYOM to forecast energy consumption using Vantage to score the model at scale without having to export all data.",
            "subjects": [
                {
                    "id": 40,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 40,
                    "subject": "Time series analytics"
                },
                {
                    "id": 40,
                    "subject": "Energy & Natural Resources"
                },
                {
                    "id": 40,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Energy_Consumption_Forecasting/Energy_Consumption_Forecasting_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Energy_Consumption_Forecasting/Pop_Energy_Consumption_Forecasting_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 111,
            "demo": "Energy Consumption Forecasting Dataiku",
            "description": "Demonstration of using Dataiku with Vantage. Instructions provided for use with your Dataiku copy + screen shots if you don't have Dataiku. PMML model from Dataiku is imported to Vantage for execution and scoring.",
            "subjects": [
                {
                    "id": 111,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 111,
                    "subject": "Energy & Natural Resources"
                },
                {
                    "id": 111,
                    "subject": "Dataiku"
                },
                {
                    "id": 111,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Energy_Consumption_Forecasting_Dataiku/Pop_Energy_Consumption_Forecasting_Dataiku.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Energy_Consumption_Forecasting_Dataiku/Energy_Consumption_Forecasting_Dataiku.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 138,
            "demo": "Energy Consumption Forecasting using AzureML",
            "description": "This leverages the power of AzureML and Teradata Vantage to enhance our machine learning capabilities and enable scalable model scoring to forecast energy consumption.",
            "subjects": [
                {
                    "id": 138,
                    "subject": "Energy & Natural Resources"
                },
                {
                    "id": 138,
                    "subject": "Azure ML"
                },
                {
                    "id": 138,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Energy_Consumption_Forecasting_AzureML/Pop_Energy_Consumption_Forecasting_AzureML.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Energy_Consumption_Forecasting_AzureML/Energy_Consumption_Forecasting_AzureML.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 224,
            "demo": "Enhance Product Hierarchies with In-DB K-means Clustering",
            "description": "Enhance a product hierarchy by leveraging time series analysis and clustering techniques",
            "subjects": [
                {
                    "id": 224,
                    "subject": "Time series analytics"
                },
                {
                    "id": 224,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Retail_Product_Hierarchy/Retail_Product_Hierarchy_Clustering_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 375,
            "demo": "Enterprise Feature Store - DataDomain",
            "description": "Build and manage a feature store across multiple business domains.",
            "subjects": [
                {
                    "id": 375,
                    "subject": "New"
                },
                {
                    "id": 375,
                    "subject": "Python"
                },
                {
                    "id": 375,
                    "subject": "Telco"
                },
                {
                    "id": 375,
                    "subject": "EFS"
                },
                {
                    "id": 375,
                    "subject": "Innovation Day"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Enterprise_Feature_Store/EFS-DataDomain.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 376,
            "demo": "Enterprise Feature Store - DatasetCatalog",
            "description": "Execute an end-to-end workflow that will build a feature store and dataset catalog.",
            "subjects": [
                {
                    "id": 376,
                    "subject": "New"
                },
                {
                    "id": 376,
                    "subject": "Python"
                },
                {
                    "id": 376,
                    "subject": "Retail"
                },
                {
                    "id": 376,
                    "subject": "EFS"
                },
                {
                    "id": 376,
                    "subject": "Innovation Day"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Enterprise_Feature_Store/EFS-DatasetCatalog.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 378,
            "demo": "Enterprise Feature Store - Feature Store ",
            "description": "Build, manage, and utilize an enterprise feature store. Execute an  end-to-end workflow for feature engineering, ingestion, cataloging, and governance with features derived from business data such as sales, marketing, and transactions.",
            "subjects": [
                {
                    "id": 378,
                    "subject": "New"
                },
                {
                    "id": 378,
                    "subject": "Python"
                },
                {
                    "id": 378,
                    "subject": "Retail"
                },
                {
                    "id": 378,
                    "subject": "EFS"
                },
                {
                    "id": 378,
                    "subject": "Innovation Day"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Enterprise_Feature_Store/EFS-FeatureStore.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 377,
            "demo": "Enterprise Feature Store - FeatureProcess",
            "description": "Build and manage a feature store for sales analytics. Execute an end-to-end process of feature engineering, transformation, and governance for sales transaction data.",
            "subjects": [
                {
                    "id": 377,
                    "subject": "New"
                },
                {
                    "id": 377,
                    "subject": "Python"
                },
                {
                    "id": 377,
                    "subject": "Retail"
                },
                {
                    "id": 377,
                    "subject": "EFS"
                },
                {
                    "id": 377,
                    "subject": "Innovation Day"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Enterprise_Feature_Store/EFS-FeatureProcess.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 223,
            "demo": "Execute Custom Python Scripts in Vantage",
            "description": "Run an external custom python script in Vantage using Script Table Operator(STO) to execute custom python scripts on Vantage",
            "subjects": [
                {
                    "id": 223,
                    "subject": "Developer Information"
                },
                {
                    "id": 223,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Script_Table_Operator/Getting_Started_STO_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 337,
            "demo": "Extract Results Function in Vantage",
            "description": "Retrieve the values stored in the Adaptive Radix Tree (ART) that's created by the execution of other analytic functions.",
            "subjects": [
                {
                    "id": 337,
                    "subject": "Python"
                },
                {
                    "id": 337,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ExtractResults.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 245,
            "demo": "Feature Store and Feature Engineering using tdfs4ds",
            "description": "Setup and deploy a Feature Store and then continue with the process of Feature Engineering.",
            "subjects": [
                {
                    "id": 245,
                    "subject": "Feature Engineering"
                },
                {
                    "id": 245,
                    "subject": "Retail"
                },
                {
                    "id": 245,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 245,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/Feature_Store_Feature_Engg/Feature_Engineering_and_Feature_Store_Usage.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 313,
            "demo": "FillrowId Function in Vantage",
            "description": "Add a column of unique row identifiers to a table.",
            "subjects": [
                {
                    "id": 313,
                    "subject": "Python"
                },
                {
                    "id": 313,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/FillRowId.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 42,
            "demo": "Financial Customer Journey",
            "description": "Uses analytic techniques to find new customers, measure marketing attribution, and maximizing marketing effectiveness",
            "subjects": [
                {
                    "id": 42,
                    "subject": "Financial"
                },
                {
                    "id": 42,
                    "subject": "Path Analytics"
                },
                {
                    "id": 42,
                    "subject": "Python"
                },
                {
                    "id": 42,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Financial_Customer_Journey/Pop_Financial_Customer_Journey_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "Web",
                    "url": "https://storage.googleapis.com/clearscape_analytics_videos/Financial_Customer_Journey_Use_Case_Demo_SP004464.MP4",
                    "label": "Video"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Financial_Customer_Journey/Financial_Customer_Journey_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Financial_Customer_Journey/Pop_Financial_Customer_Journey_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Financial_Customer_Journey/Financial_Customer_Journey_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 4,
            "demo": "Financial Fraud Detection InDB",
            "description": "Detect financial transaction fraud  using powerful in-database machine learning functions",
            "subjects": [
                {
                    "id": 4,
                    "subject": "Financial"
                },
                {
                    "id": 4,
                    "subject": "Machine Learning"
                },
                {
                    "id": 4,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Financial_Fraud_Detection_InDB/Financial_Fraud_Detection_InDB_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Financial_Fraud_Detection_InDB/Pop_Financial_Fraud_Detection_InDB_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "Web",
                    "url": "https://storage.googleapis.com/clearscape_analytics_videos/Financial_Fraud_Detection_Use_Case_Demo_SP004465.MP4",
                    "label": "Video"
                }
            ]
        },
        {
            "id": 187,
            "demo": "Financial Fraud Detection InDB",
            "description": "Detect financial transaction fraud using powerful in-database machine learning functions",
            "subjects": [
                {
                    "id": 187,
                    "subject": "Financial"
                },
                {
                    "id": 187,
                    "subject": "Machine Learning"
                },
                {
                    "id": 187,
                    "subject": "R"
                },
                {
                    "id": 187,
                    "subject": "Fraud Detection"
                },
                {
                    "id": 187,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Financial_Fraud_Detection_InDB/Financial_Fraud_Detection_InDB_R.ipynb",
                    "label": "R Version"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Financial_Fraud_Detection_InDB/Financial_Fraud_Detection_InDB_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 98,
            "demo": "Financial Fraud Detection VIA BYOM",
            "description": "A model that was developed externally  is imported into Vantage for evaluation and execution at scale to detect fraud.",
            "subjects": [
                {
                    "id": 98,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 98,
                    "subject": "Financial"
                },
                {
                    "id": 98,
                    "subject": "Machine Learning"
                },
                {
                    "id": 98,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Financial_Fraud_Detection_BYOM/Financial_Fraud_Detection_BYOM_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Financial_Fraud_Detection_BYOM/Pop_Financial_Fraud_Detection_BYOM_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 362,
            "demo": "Financial Fraud Detection using AutoML",
            "description": "Step through an automated approach of building models to identify fraud.",
            "subjects": [
                {
                    "id": 362,
                    "subject": "Python"
                },
                {
                    "id": 362,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 362,
                    "subject": "End-to-End"
                },
                {
                    "id": 362,
                    "subject": "AutoML"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Financial_Fraud_Detection/Financial_Fraud_Detection_AutoML_Approach.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 363,
            "demo": "Financial Fraud Detection using a Traditional Approach",
            "description": "Step through a traditional approach of building models to identify and identify fraud.",
            "subjects": [
                {
                    "id": 363,
                    "subject": "Python"
                },
                {
                    "id": 363,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 363,
                    "subject": "End-to-End"
                },
                {
                    "id": 363,
                    "subject": "ModelOps"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Financial_Fraud_Detection/Financial_Fraud_Detection_Traditional_Approach.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 270,
            "demo": "Fit and Transform functions in Vantage",
            "description": "Determine if a specific numeric transformation can be applied to target columns and make the output available to the Transform() function.",
            "subjects": [
                {
                    "id": 270,
                    "subject": "Python"
                },
                {
                    "id": 270,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/FitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 328,
            "demo": "FitMetrics Function in Vantage",
            "description": "Generate googness-of-fit metrics from multivariate series.",
            "subjects": [
                {
                    "id": 328,
                    "subject": "Python"
                },
                {
                    "id": 328,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/FitMetrics.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 140,
            "demo": "Flood Proximity to Climate Risk Analysis",
            "description": "This allows enterprises to rapidly analyze this geographic-related information in real-time at any scale - effectively understanding the impacts of these climate events on entire populations.",
            "subjects": [
                {
                    "id": 140,
                    "subject": "Financial"
                },
                {
                    "id": 140,
                    "subject": "Geospatial"
                },
                {
                    "id": 140,
                    "subject": "Energy & Natural Resources"
                },
                {
                    "id": 140,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Flood_Proximity_Analysis/Flood_Proximity_Analysis_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Flood_Proximity_Analysis/Pop_Flood_Proximity_Analysis_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 49,
            "demo": "Fourier Transforms",
            "description": "Fourier transformations are demonstrated to filter out noise from signals to allow identification of underlying patterns.",
            "subjects": [
                {
                    "id": 49,
                    "subject": "Time series analytics"
                },
                {
                    "id": 49,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Fourier_Transforms/Pop_Fourier_Transforms_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Fourier_Transforms/Fourier_Transforms_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 371,
            "demo": "From Complaints to Clarity: Uncovering Hidden Trends in Telco Customer Feedback",
            "description": "See how a\u00a0fully data-driven approach\u00a0can help analyze large volumes of text data, automatically identifying topics and tracking their trends over time.",
            "subjects": [
                {
                    "id": 371,
                    "subject": "New"
                },
                {
                    "id": 371,
                    "subject": "Python"
                },
                {
                    "id": 371,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 371,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 371,
                    "subject": "Hugging Face"
                },
                {
                    "id": 371,
                    "subject": "Innovation Day"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_Complaints_Analysis_InVantage/Telco_Complaints_Analysis_Ivsm.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 238,
            "demo": "Ftest function in Vantage",
            "description": "Compare the variance of two independent populations",
            "subjects": [
                {
                    "id": 238,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 238,
                    "subject": "Finance"
                },
                {
                    "id": 238,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/FTest.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 329,
            "demo": "GLM and TDGLMPredict Functions in Vantage",
            "description": "Use a generalized linear model to perform regression and classification analysis on a data set.  Then predict the target values and class labels from that data set.",
            "subjects": [
                {
                    "id": 329,
                    "subject": "Python"
                },
                {
                    "id": 329,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GLMandTDGLMPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 334,
            "demo": "GLMPerSegment and GLMPredictPerSegment Functions in Vantage",
            "description": "Create models by partitioning datasets on a key value.  Then use those models to predict future values (regressions) and class labels (classifications).",
            "subjects": [
                {
                    "id": 334,
                    "subject": "Python"
                },
                {
                    "id": 334,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GLMPerSegmentandGLMPredictPerSegment.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 189,
            "demo": "Generate Teradata SQL with GenAI and AWS Bedrock",
            "description": "In this demo, we use AWS Bedrock's LLMs and LangChain to create a text-to-Teradata SQL agent.",
            "subjects": [
                {
                    "id": 189,
                    "subject": "Generative AI"
                },
                {
                    "id": 189,
                    "subject": "Python"
                },
                {
                    "id": 189,
                    "subject": "Retail"
                },
                {
                    "id": 189,
                    "subject": "AWS SageMaker"
                },
                {
                    "id": 189,
                    "subject": "AWS Bedrock"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Generative_Question_Answering_GenAI_Bedrock/AWS_Bedrock_LangChain_Text_to_SQL.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 135,
            "demo": "Generative AI Question Answering",
            "description": "Uses OpenAI to translate english language questions into SQL queries to run against a table of marketing data. This includes a link to a notebook with instructions for getting the required OpenAI API key.",
            "subjects": [
                {
                    "id": 135,
                    "subject": "Generative AI"
                },
                {
                    "id": 135,
                    "subject": "Marketing"
                },
                {
                    "id": 135,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "Web",
                    "url": "https://storage.googleapis.com/clearscape_analytics_videos/ClearScape%20Analytics%20Experience%20-%20Generative%20AI%20Powered%20Search-Based%20Product%20Recommendation%20Use%20Case%20Demo%20-%20External%20-%20SP004561.MP4",
                    "label": "Video"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Generative_Question_Answering_GenAI/Pop_Generative_Question_Answering_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Generative_Question_Answering_GenAI/Generative_Question_Answering_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 274,
            "demo": "GenseriesFormula Function in Vantage",
            "description": "Define and apply a formula to generate a time series.",
            "subjects": [
                {
                    "id": 274,
                    "subject": "Python"
                },
                {
                    "id": 274,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GenseriesFormula.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 296,
            "demo": "GenseriesSinusoids Function in Vantage",
            "description": "Generate a time series containing a subset of the sinusoidal's element's periodicities, whose payload content value is of type REAL.",
            "subjects": [
                {
                    "id": 296,
                    "subject": "Python"
                },
                {
                    "id": 296,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GenseriesSinusoids.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 251,
            "demo": "GetFutileColumns function in Vantage",
            "description": "Interrogate a table to discover which columns would have no impact on creating a model.",
            "subjects": [
                {
                    "id": 251,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 251,
                    "subject": "Finance"
                },
                {
                    "id": 251,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GetFutileColumns.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 241,
            "demo": "GetRowsWithMissingValues function in Vantage",
            "description": "Display rows that have NULL values in a specified data column",
            "subjects": [
                {
                    "id": 241,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 241,
                    "subject": "Finance"
                },
                {
                    "id": 241,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GetRowsWithMissingValues.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 250,
            "demo": "GetRowsWithoutMissingValues function in Vantage",
            "description": "Explore the rows of a dataset that have non-NULL values in specific columns.",
            "subjects": [
                {
                    "id": 250,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 250,
                    "subject": "Finance"
                },
                {
                    "id": 250,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/GetRowsWithoutMissingValues.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 159,
            "demo": "Getting Started With Azure",
            "description": "Follow these steps to create your first Azure account and create an Azure Machine Learning workspace to complete our AzureML use cases.",
            "subjects": [
                {
                    "id": 159,
                    "subject": "First Time User"
                },
                {
                    "id": 159,
                    "subject": "Azure"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Energy_Consumption_Forecasting_AzureML/Getting_Started_with_Azure.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 207,
            "demo": "Getting Started with Azure OpenAI",
            "description": "Follow these instructions to setup the Azure OpenAI endpoint and generate the access Keys required to run the model.",
            "subjects": [
                {
                    "id": 207,
                    "subject": "Python"
                },
                {
                    "id": 207,
                    "subject": "OpenAI"
                },
                {
                    "id": 207,
                    "subject": "Azure"
                },
                {
                    "id": 207,
                    "subject": "First Time User"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Azure-OpenAI.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 128,
            "demo": "Graph Analysis of CDR Records",
            "description": "Uses graph analysis to identify communities and key influencers within Call Data Records.  This uses Script Table Operator to invoke external procedures to work inside the Vantage database without exporting data.",
            "subjects": [
                {
                    "id": 128,
                    "subject": "Telco"
                },
                {
                    "id": 128,
                    "subject": "Machine Learning"
                },
                {
                    "id": 128,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Graph_Analysis/Graph_Analysis_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Graph_Analysis/Pop_Graph_Analysis_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                }
            ]
        },
        {
            "id": 96,
            "demo": "Green Manufacturing",
            "description": "Uses analytic and ML techniques  to predict how long vehicle testing will take based on combination of features installed.",
            "subjects": [
                {
                    "id": 96,
                    "subject": "Manufacturing"
                },
                {
                    "id": 96,
                    "subject": "Machine Learning"
                },
                {
                    "id": 96,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Green_Manufacturing/Green_Manufacturing_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Green_Manufacturing/Pop_Green_Manufacturing_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 156,
            "demo": "Grocery Recommendations using GenAI",
            "description": "Use context-based product recommendations powered by GenAI Large Language Models to enhance a shopping experience.",
            "subjects": [
                {
                    "id": 156,
                    "subject": "Python"
                },
                {
                    "id": 156,
                    "subject": "SQL"
                },
                {
                    "id": 156,
                    "subject": "Generative AI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Grocery_Recommendation/Grocery_Recommendation_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 348,
            "demo": "Hashing Your Data",
            "description": "Work through 4 use cases that demonstrate the usage of the Teradata hash function.",
            "subjects": [
                {
                    "id": 348,
                    "subject": "Python"
                },
                {
                    "id": 348,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/Hashing/Hashing.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 67,
            "demo": "Heart Failure Prediction",
            "description": "Machine learning is applied to the complex attributes of patients to help recognize patterns that may lead to heart failure faster than a human may recognize.",
            "subjects": [
                {
                    "id": 67,
                    "subject": "Healthcare"
                },
                {
                    "id": 67,
                    "subject": "Machine Learning"
                },
                {
                    "id": 67,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Heart_Failure_Prediction/Pop_Heart_Failure_Prediction_Python.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Heart_Failure_Prediction/Heart_Failure_Prediction_Python.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Heart_Failure_Prediction/Pop_Heart_Failure_Prediction_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 244,
            "demo": "Histogram function in Vantage",
            "description": "Calculate the frequency distribution of a data set using multiple methods: Sturges, Scot, Variable-width, Equal-width",
            "subjects": [
                {
                    "id": 244,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 244,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Histogram.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 317,
            "demo": "HoldWintersForecaster Function in Vantage",
            "description": "Apply exponential smoothing on a combination of level, trend and seasonality components to make predictions.",
            "subjects": [
                {
                    "id": 317,
                    "subject": "Python"
                },
                {
                    "id": 317,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/HoltWintersForecaster.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 367,
            "demo": "Hospital Readmission using Teradata AutoML Functionality",
            "description": "Identify patients with a history of high hospital utilization, prescribed, or adjusted diabetes medications to derive predictions.",
            "subjects": [
                {
                    "id": 367,
                    "subject": "Python"
                },
                {
                    "id": 367,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 367,
                    "subject": "Healthcare"
                },
                {
                    "id": 367,
                    "subject": "AutoML"
                },
                {
                    "id": 367,
                    "subject": "Hugging Face"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Hospital_Readmission_AutoML/Hospital_Readmission_AutoML.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 80,
            "demo": "How to Submit Your Demos",
            "description": "It is very easy to submit your demo for publication. Tell us directory with the notebook and referenced files and grant us access to your database.  We'll take it from there.",
            "subjects": [
                {
                    "id": 80,
                    "subject": "Developer Information"
                },
                {
                    "id": 80,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/How_to_Submit_Your_Demos/How_to_Submit_Your_Demos_Video.ipynb",
                    "label": "Video"
                },
                {
                    "type": "notebook",
                    "url": "Getting_Started/How_to_Submit_Your_Demos/How_to_Submit_Your_Demos.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 232,
            "demo": "Hugging Face Model using Script Table Operator",
            "description": "Execute a Huggingface model using the Vantage Script Table operator(STO) on Vantage Enterprise.",
            "subjects": [
                {
                    "id": 232,
                    "subject": "Python"
                },
                {
                    "id": 232,
                    "subject": "Large Language Models"
                },
                {
                    "id": 232,
                    "subject": "Hugging Face"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/Huggingface_model_STO_Python/Huggingface_model_STO_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 129,
            "demo": "Hyper-Personalization",
            "description": "Hyper-personalization creates models from customer iteractions on multiple channels to determine the \"Next Best Offer\" for the individual.",
            "subjects": [
                {
                    "id": 129,
                    "subject": "Machine Learning"
                },
                {
                    "id": 129,
                    "subject": "Retail"
                },
                {
                    "id": 129,
                    "subject": "Marketing"
                },
                {
                    "id": 129,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Hyper_Personalization/Pop_Hyper_Personalization_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Hyper_Personalization/Hyper_Personalization_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 155,
            "demo": "Hyperparameter Tuning using the Titanic Passenger Dataset",
            "description": "Create a predictive algorithm that can identify whethr or not passengers on the Titanic survived the ship's sinking.",
            "subjects": [
                {
                    "id": 155,
                    "subject": "Python"
                },
                {
                    "id": 155,
                    "subject": "Machine Learning"
                },
                {
                    "id": 155,
                    "subject": "Hyperparameter Tuning"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/TitanicSurvival_HyperParameter/Predict_TitanicSurvival_Hyperparameter_Tuning_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 109,
            "demo": "I am **not** a programmer",
            "description": "Not everyone that uses this site will want to learn programming. Some will want to review the business cases, look at the steps for the analysis and look at the tables, charts and maps. This is a guide for those people.",
            "subjects": [
                {
                    "id": 109,
                    "subject": "I am **not** a programmer"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/I_am_not_a_programmer/I_am_not_a_programmer.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 350,
            "demo": "Image2Matrix and Matrix2Image Functions in Vantage",
            "description": "Convert JPEG or PNG images to matrices, manipulate any element, then convert the matrices back into images.",
            "subjects": [
                {
                    "id": 350,
                    "subject": "Python"
                },
                {
                    "id": 350,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Image2matrixandMatrix2Image.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 364,
            "demo": "In-Database XGBoost using ModelOps and Git for Financial Fraud Detection",
            "description": "Step through a traditional approach of building models to identify and predict customer churn and storing them in the database.",
            "subjects": [
                {
                    "id": 364,
                    "subject": "Python"
                },
                {
                    "id": 364,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 364,
                    "subject": "End-to-End"
                },
                {
                    "id": 364,
                    "subject": "ModelOps"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Financial_Fraud_Detection/FinFraud_EndtoEnd_ModelOps_GIT_Python_indb_XGB.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 215,
            "demo": "Initiate Parallel CPU Inferencing of Hugging Face Models in Vantage",
            "description": "Execute this notebook first to prepare the environment to demonstrate Parallel CPU Inferencing of Hugging Face Models in Vantage",
            "subjects": [
                {
                    "id": 215,
                    "subject": "Language Models"
                },
                {
                    "id": 215,
                    "subject": "Hugging Face"
                },
                {
                    "id": 215,
                    "subject": "Parallel CPU Inferencing"
                },
                {
                    "id": 215,
                    "subject": "Developer Information"
                },
                {
                    "id": 215,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Language_Models_InVantage/Initialization_and_Model_Load.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Language_Models_InVantage/Pop_Initialization_and_Model_Load.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 338,
            "demo": "InputValidator Function in Vantage",
            "description": "Validate data and identify series and matrices that have indiscrete data.",
            "subjects": [
                {
                    "id": 338,
                    "subject": "Python"
                },
                {
                    "id": 338,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/InputValidator.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 195,
            "demo": "Insights from Sentiment Analysis with AWS Bedrock",
            "description": "Extract insights from unstructured data to identify and address customer concerns.",
            "subjects": [
                {
                    "id": 195,
                    "subject": "AWS"
                },
                {
                    "id": 195,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 195,
                    "subject": "Sentiment Analysis"
                },
                {
                    "id": 195,
                    "subject": "Emotion Detection"
                },
                {
                    "id": 195,
                    "subject": "Aspect-Based Sentiment Analysis"
                },
                {
                    "id": 195,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 195,
                    "subject": "Large Language Models"
                },
                {
                    "id": 195,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Sentiment_Analysis.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Sentiment_Analysis.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 47,
            "demo": "Insurance Policy Temporal",
            "description": "Show As-IS/As-Was capabilities of Vantage Temporal to dramatically simplify the SQL and improve performance for analyzing insurance policies versus claims.",
            "subjects": [
                {
                    "id": 47,
                    "subject": "Financial"
                },
                {
                    "id": 47,
                    "subject": "Time series analytics"
                },
                {
                    "id": 47,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Insurance_Policy_Temporal/Pop_Insurance_Policy_Temporal_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Insurance_Policy_Temporal/Insurance_Policy_Temporal_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 262,
            "demo": "Interactive Npath Widget",
            "description": "Generate Sankey and Icicle charts from event logs.",
            "subjects": [
                {
                    "id": 262,
                    "subject": "Path Analytics"
                },
                {
                    "id": 262,
                    "subject": "Teradata Packages"
                },
                {
                    "id": 262,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/NPath_Visualizer_Widget/NPath_Visualizer_Widget.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 35,
            "demo": "Intro to Panda for Python",
            "description": "Provides step-by-step instructions on the basics of using Python Pandas with Jupyter notebooks.",
            "subjects": [
                {
                    "id": 35,
                    "subject": "Developer Information"
                },
                {
                    "id": 35,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/Intro_to_Pandas_For_Python/Pop_Intro_to_Pandas_For_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "Getting_Started/Intro_to_Pandas_For_Python/Intro_to_Pandas_For_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 78,
            "demo": "Introduction Video",
            "description": "Video description how to find demos in the index and folder view, tips on running demos and options for foreign vs local tables used in the demonstrations in your ClearScape Analytics environment.",
            "subjects": [
                {
                    "id": 78,
                    "subject": "First Time User"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Introduction_Video/Introduction_Video_SQL.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 182,
            "demo": "Introduction to Plot types using Teradataml Widgets.",
            "description": "This is an introduction to using the various Plot types available as widgets: Line, Bar, Mesh, Wiggle, Geometry, etc.",
            "subjects": [
                {
                    "id": 182,
                    "subject": "Python"
                },
                {
                    "id": 182,
                    "subject": "Developer Information"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Teradataml_Widgets/Plot_Notebook.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 73,
            "demo": "K-Means Clustering and ML model",
            "description": "This uses the unsupervised K-Means ML algorithm to identify patterns in retail purchases.",
            "subjects": [
                {
                    "id": 73,
                    "subject": "Machine Learning"
                },
                {
                    "id": 73,
                    "subject": "Retail"
                },
                {
                    "id": 73,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/K-Means_Clustering_and_ML_model/Pop_K-Means_Clustering_and_ML_model_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/K-Means_Clustering_and_ML_model/K-Means_Clustering_and_ML_model_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 286,
            "demo": "Kmeans and KMeansPredict Functions in Vantage",
            "description": "Group a set of observations into k clusters in which each observation belongs to the cluster with the nearest mean.  Then predict a target class.",
            "subjects": [
                {
                    "id": 286,
                    "subject": "Python"
                },
                {
                    "id": 286,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 286,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/KMeans_KMeansPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 76,
            "demo": "Knee Replacement Attribution",
            "description": "The ClearScape Analytics Attribution function is used to determine the weight of various events that precede the final outcome, in this example, knee replacement.",
            "subjects": [
                {
                    "id": 76,
                    "subject": "Healthcare"
                },
                {
                    "id": 76,
                    "subject": "Path Analytics"
                },
                {
                    "id": 76,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Knee_Replacement/Knee_Replacement_Attribution_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Knee_Replacement/Pop_Knee_Replacement_Attribution_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 77,
            "demo": "Knee Replacement nPath",
            "description": "This uses the ClearScape Analytics nPath\u00ae function to provide visuals on the events leading up to the final outcome, in this case, knee replacement.",
            "subjects": [
                {
                    "id": 77,
                    "subject": "Healthcare"
                },
                {
                    "id": 77,
                    "subject": "Path Analytics"
                },
                {
                    "id": 77,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Knee_Replacement/Knee_Replacement_nPath_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Knee_Replacement/Pop_Knee_Replacement_nPath_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 311,
            "demo": "LineSpec Function in Vantage",
            "description": "Use this function to identify cycles that may be inherent in an input series.",
            "subjects": [
                {
                    "id": 311,
                    "subject": "Python"
                },
                {
                    "id": 311,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/LineSpec.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 259,
            "demo": "LinearRegr function in Vantage",
            "description": "Fit data to a curve using a formula that defines the relationship between the explanatory variable and the response variable.",
            "subjects": [
                {
                    "id": 259,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 259,
                    "subject": "Finance"
                },
                {
                    "id": 259,
                    "subject": "Python"
                },
                {
                    "id": 259,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/LinearRegr.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 318,
            "demo": "MAMean Function in Vantage",
            "description": "Use historical data to forecast activity 1 period ahead (t+1).",
            "subjects": [
                {
                    "id": 318,
                    "subject": "Python"
                },
                {
                    "id": 318,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/MAMean.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 116,
            "demo": "Marketing Campaign Effectiveness",
            "description": "Examines the results of campaigns by various customer attributes then uses correlation, outlier elimination, and machine learning to identify the best campaigns.",
            "subjects": [
                {
                    "id": 116,
                    "subject": "Retail"
                },
                {
                    "id": 116,
                    "subject": "Machine Learning"
                },
                {
                    "id": 116,
                    "subject": "Marketing"
                },
                {
                    "id": 116,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Marketing_Campaign_Effectiveness/Pop_Marketing_Campaign_Effectiveness_Preditction_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Marketing_Campaign_Effectiveness/Marketing_Campaign_Effectiveness_Preditction_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 271,
            "demo": "MatricMultiply Function in Vantage",
            "description": "Create a data series based on two matrixes.",
            "subjects": [
                {
                    "id": 271,
                    "subject": "Python"
                },
                {
                    "id": 271,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/MatrixMultiply.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 178,
            "demo": "Mental Health Chat with Fine-tuned OpenAI Model",
            "description": "Train a GPT-3.5 Turbo model using the OpenAI API endpoint.  Ask mental health questions using a chat input box.",
            "subjects": [
                {
                    "id": 178,
                    "subject": "Healthcare"
                },
                {
                    "id": 178,
                    "subject": "OpenAI"
                },
                {
                    "id": 178,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Fine_Tuning_OpenAI_Model/Fine_Tuning_OpenAI_Model_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 339,
            "demo": "Minfo Function in Vantage",
            "description": "Return a one row summary describing the data in a matrix.",
            "subjects": [
                {
                    "id": 339,
                    "subject": "Python"
                },
                {
                    "id": 339,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/MInfo.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 267,
            "demo": "ModelOps",
            "description": "Implement Model Factory Solution Accelerator using Python commands with the Restful API layer of ClearScape Analytics ModelOps.",
            "subjects": [
                {
                    "id": 267,
                    "subject": "ModelOps"
                },
                {
                    "id": 267,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/12_ModelOps_Model_Factory_REST_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 257,
            "demo": "ModelOps BYOM with Dataiku",
            "description": "Use BYOM in ModelOps to operationalize the PIMA Diabetes use case using a Dataiku model.",
            "subjects": [
                {
                    "id": 257,
                    "subject": "ModelOps"
                },
                {
                    "id": 257,
                    "subject": "Python"
                },
                {
                    "id": 257,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/17_ModelOps_BYOM_PIMA_DATAIKU.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 258,
            "demo": "ModelOps BYOM with Datarobot",
            "description": "Use BYOM in ModelOps to operationalize the PIMA Diabetes use case using a DataRobot model.",
            "subjects": [
                {
                    "id": 258,
                    "subject": "ModelOps"
                },
                {
                    "id": 258,
                    "subject": "Python"
                },
                {
                    "id": 258,
                    "subject": "SQL"
                },
                {
                    "id": 258,
                    "subject": "DataRobot"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/18_ModelOps_BYOM_PIMA_DataRobot.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 242,
            "demo": "ModelOps Feature Engineering",
            "description": "Preprocess and transform data within the ModelOps pipeline",
            "subjects": [
                {
                    "id": 242,
                    "subject": "Feature Engineering"
                },
                {
                    "id": 242,
                    "subject": "ModelOps"
                },
                {
                    "id": 242,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/15_ModelOps_Feature_Engineering.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 117,
            "demo": "ModelOps Introduction & List of Notebooks",
            "description": "This introduction and table of contents introduces you to ModelOps and provides a launch for ModelOps. It is **recommended** to go through ModelOps demonstrations in sequence.",
            "subjects": [
                {
                    "id": 117,
                    "subject": "H2O.ai"
                },
                {
                    "id": 117,
                    "subject": "R"
                },
                {
                    "id": 117,
                    "subject": "Python"
                },
                {
                    "id": 117,
                    "subject": "ModelOps"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/00_ModelOps_Introduction.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 237,
            "demo": "ModelOps Notebook Scheduling using BYOM",
            "description": "Users can deploy and schedule notebook jobs, with execution logs available in both HTML and notebook formats.",
            "subjects": [
                {
                    "id": 237,
                    "subject": "ModelOps"
                },
                {
                    "id": 237,
                    "subject": "Finance"
                },
                {
                    "id": 237,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/16_ModelOps_Notebook_Scheduling.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 174,
            "demo": "Mortgage Calculator Chatbot using GenAI: Finetune LLM",
            "description": "Fine-tuned an OpenAI model using RAG, LangChain and LLM models framework.  Query a chatbot for answers about a mortgage and available housing within a predefiend area.",
            "subjects": [
                {
                    "id": 174,
                    "subject": "Financial"
                },
                {
                    "id": 174,
                    "subject": "OpenAI"
                },
                {
                    "id": 174,
                    "subject": "Generative AI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Mortgage_Calculator_GenAI/Mortgage_Calculator_Python_TrustedAI_Finetune_LLM.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 171,
            "demo": "Mortgage Calculator Chatbot using Trusted AI(RAG)",
            "description": "Experience the integration of LLM models to provide user-friendly responses to queries.  RAG combines retrieval and generative approaches.",
            "subjects": [
                {
                    "id": 171,
                    "subject": "Financial"
                },
                {
                    "id": 171,
                    "subject": "Generative AI"
                },
                {
                    "id": 171,
                    "subject": "Python"
                },
                {
                    "id": 171,
                    "subject": "OpenAI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Mortgage_Calculator_GenAI/Mortgage_Calculator_Python_TrustedAI_RAG.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 175,
            "demo": "Mortgage Calculator chatbot using GenAI: RAG",
            "description": "Build a conversational chatbot and ask questions about a mortgage and available housing within a predefined area using LangChain.",
            "subjects": [
                {
                    "id": 175,
                    "subject": "Financial"
                },
                {
                    "id": 175,
                    "subject": "OpenAI"
                },
                {
                    "id": 175,
                    "subject": "Python"
                },
                {
                    "id": 175,
                    "subject": "Generative AI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Mortgage_Calculator_GenAI/Mortgage_Calculator_Python_TrustedAI_RAG.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 148,
            "demo": "Mortgage Calculator using GenAI",
            "description": "Use Retrieval-Augmented Generation (RAG), Lanchain and LLM models to as questions about loans and retrieve relevant data from Vantage.",
            "subjects": [
                {
                    "id": 148,
                    "subject": "Financial"
                },
                {
                    "id": 148,
                    "subject": "Generative AI"
                },
                {
                    "id": 148,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Mortgage_Calculator_GenAI/Mortgage_Calculator_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Mortgage_Calculator_GenAI/Pop_Mortgage_Calculator_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 308,
            "demo": "MovingAverage Function in Vantage",
            "description": "Calculate the Cumulative Average of the quantities per Invoice in a dataset.",
            "subjects": [
                {
                    "id": 308,
                    "subject": "Python"
                },
                {
                    "id": 308,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/MovingAverage.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 130,
            "demo": "Multi-Touch Attribution for Business Analyst",
            "description": "This version of the Multi-Touch Attribution demonstration is focused on the interests of the Business Analyst.",
            "subjects": [
                {
                    "id": 130,
                    "subject": "Marketing"
                },
                {
                    "id": 130,
                    "subject": "Retail"
                },
                {
                    "id": 130,
                    "subject": "Machine Learning"
                },
                {
                    "id": 130,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/MultiTouch_Attribution/Pop_Analyst_MultiTouch_Attribution_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/MultiTouch_Attribution/Analyst_MultiTouch_Attribution_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 131,
            "demo": "Multi-Touch Attribution for Data Scientist",
            "description": "Demonstrates attribution of customer behavior via single touch and multi-touch rule-based models using statistical and algorithmic models. Multiple approaches are demonstrated.",
            "subjects": [
                {
                    "id": 131,
                    "subject": "Retail"
                },
                {
                    "id": 131,
                    "subject": "Machine Learning"
                },
                {
                    "id": 131,
                    "subject": "Marketing"
                },
                {
                    "id": 131,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/MultiTouch_Attribution/Pop_MultiTouch_Attribution_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/MultiTouch_Attribution/MultiTouch_Attribution_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 260,
            "demo": "MultivarRegr function in Vantage",
            "description": "Use a formula that defines the relationship between the explanatory variable and multiple response variables.",
            "subjects": [
                {
                    "id": 260,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 260,
                    "subject": "Finance"
                },
                {
                    "id": 260,
                    "subject": "Python"
                },
                {
                    "id": 260,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/MultivarRegr.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 306,
            "demo": "NGramSplitter Function in Vantage",
            "description": "Tokenize an input stream of text and outputs n multigrams (called n-grams) based on the specified delimiter and reset parameters.",
            "subjects": [
                {
                    "id": 306,
                    "subject": "Python"
                },
                {
                    "id": 306,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/NGramSplitter.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 277,
            "demo": "NPath Function in Vantage",
            "description": "Discover paths leading to Accounts being closed for 'Gold' customers.",
            "subjects": [
                {
                    "id": 277,
                    "subject": "Python"
                },
                {
                    "id": 277,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/NPath.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 26,
            "demo": "NYC Taxi Geospatial",
            "description": "Applies geospatial functions to analysis of NYC Taxi pickups and drop off locations.",
            "subjects": [
                {
                    "id": 26,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 26,
                    "subject": "Geospatial"
                },
                {
                    "id": 26,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/NYC_Taxi/Pop_NYC_Taxi_Geospatial_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/NYC_Taxi/NYC_Taxi_Geospatial_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 63,
            "demo": "NYC Taxi Temporal",
            "description": "Time series data can answer the questions about what was happening at a point in time. This applies Time series and temporal capabilities  of vantage to NYC taxi data.",
            "subjects": [
                {
                    "id": 63,
                    "subject": "Time series analytics"
                },
                {
                    "id": 63,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/NYC_Taxi/NYC_Taxi_Temporal_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/NYC_Taxi/Pop_NYC_Taxi_Temporal_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 312,
            "demo": "NaiveBayesTextClassifierTrainer and NaiveBayesTextClassifierPredict Functions in Vantage",
            "description": "Calculate conditional probabilities.  Train a model with those values and use the predict function to classify documents into categories.",
            "subjects": [
                {
                    "id": 312,
                    "subject": "Python"
                },
                {
                    "id": 312,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/NaiveBayesTextClassifierTrainerandPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 162,
            "demo": "Natural Language Processing",
            "description": "Use NLP for Sentiment Analysis, perform Kmeans clustering, execute Principal Component Analysis (PCA) using comments received by a Retail Store",
            "subjects": [
                {
                    "id": 162,
                    "subject": "Python"
                },
                {
                    "id": 162,
                    "subject": "Retail"
                },
                {
                    "id": 162,
                    "subject": "Text Analysis"
                },
                {
                    "id": 162,
                    "subject": "Natural Language Processing"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Natural_Language_Processing/Natural_Language_Processing_Python.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 273,
            "demo": "NonLinearCombineFit and NonLinearCombineTransform Function in Vantage",
            "description": "Use the NonLinearCombineFit and NonLinearCombineTransform functions available in Vantage to create new feature columns in a dataset.",
            "subjects": [
                {
                    "id": 273,
                    "subject": "Python"
                },
                {
                    "id": 273,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/NonLinearCombineFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 315,
            "demo": "NumApply Function in Vantage",
            "description": "Apply a user-defined, numberic operator to a specific column or set of columns in a database table.",
            "subjects": [
                {
                    "id": 315,
                    "subject": "Python"
                },
                {
                    "id": 315,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/NumApply.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 269,
            "demo": "OneClassSVM and OneClassSVMPredict functions in Vantage",
            "description": "See how to use the OneClassSVM and OneClassSVMPredict functions .",
            "subjects": [
                {
                    "id": 269,
                    "subject": "Python"
                },
                {
                    "id": 269,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/OneClassSVMandOneClassSVMPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 281,
            "demo": "OneHotEncodingFit and OneHotEncodingTransform in Vantage",
            "description": "Use these functions to analyze whether gender influences customer churn.",
            "subjects": [
                {
                    "id": 281,
                    "subject": "Python"
                },
                {
                    "id": 281,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/OneHotEncodingFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 282,
            "demo": "OrdinalEncodingFit and OrdinalEncodingTransform in Vantage",
            "description": "Analyze banking data to see if customer geography is influencing churn.",
            "subjects": [
                {
                    "id": 282,
                    "subject": "Python"
                },
                {
                    "id": 282,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 282,
                    "subject": "Finance"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/OrdinalEncodingFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 81,
            "demo": "Outlier Analysis",
            "description": "Outliers in an analysis skew the results and make it difficult to recognize the main patterns. ClearScape Analytics has tools to remove outliers automatically.",
            "subjects": [
                {
                    "id": 81,
                    "subject": "Data Preparation"
                },
                {
                    "id": 81,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Outlier_Analysis/Outlier_Analysis_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Outlier_Analysis/Pop_Outlier_Analysis_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 254,
            "demo": "OutlierFilterFit and OutlierFilterTransform",
            "description": "Use outlier filtering to identify and remove outliers from a dataset.",
            "subjects": [
                {
                    "id": 254,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 254,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/OutlierFilterFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 228,
            "demo": "PIMA Predicitons with teradataml OpenSourceML LightFBM using GIT",
            "description": "Use the Teradata OpenSourceML LightGBM model to operationalize the PIMA diabetes use case with Python and ModelOps",
            "subjects": [
                {
                    "id": 228,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 228,
                    "subject": "ModelOps"
                },
                {
                    "id": 228,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ModelOps/14_ModelOps_GIT_PIMA_Python_osml_LightGBM.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 295,
            "demo": "Pack and Unpack Functions in Vantage",
            "description": "Store virtual columns from a dataframe in one physical column and then extract them back into multiple dataframe columns.",
            "subjects": [
                {
                    "id": 295,
                    "subject": "Python"
                },
                {
                    "id": 295,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 295,
                    "subject": "Finance"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Pack_Unpack.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 179,
            "demo": "Parkinson's Disease Prediction using Signal Processing",
            "description": "Detect Parkinson's Disease at an early stage by using Vantage InDB functions for model training and scoring to compare the performance of two models against biomedical voice measurements.",
            "subjects": [
                {
                    "id": 179,
                    "subject": "Healthcare"
                },
                {
                    "id": 179,
                    "subject": "Python"
                },
                {
                    "id": 179,
                    "subject": "Machine Learning"
                },
                {
                    "id": 179,
                    "subject": "Signal Processing"
                },
                {
                    "id": 179,
                    "subject": "Open Source"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Parkinsons_Disease_Prediction/Parkinsons_Disease_Prediction_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 289,
            "demo": "PolynomialFeaturesFit and PolynomialFeaturesTransform Functions in Vantage",
            "description": "Use these functions to find non-linear relationships between different customer attributes.",
            "subjects": [
                {
                    "id": 289,
                    "subject": "Python"
                },
                {
                    "id": 289,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 289,
                    "subject": "Finance"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/PolynomialFeaturesFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 335,
            "demo": "Portman Function in Vantage",
            "description": "Use the Portmanteau test to execute a series of test to determine whether the residuals can be classified as zeo mean, no serial correlation, or homoscedastic variance (white noise).",
            "subjects": [
                {
                    "id": 335,
                    "subject": "Python"
                },
                {
                    "id": 335,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Portman.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 280,
            "demo": "PowerSpec Function in Vantage",
            "description": "Converts a time series to a frequency domain to facilitate frequency domain analysis.",
            "subjects": [
                {
                    "id": 280,
                    "subject": "Python"
                },
                {
                    "id": 280,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/KNN.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 278,
            "demo": "PowerTransform Function in Vantage",
            "description": "get forecast values for a heteroscedastic time series using PowerTransform function.",
            "subjects": [
                {
                    "id": 278,
                    "subject": "Python"
                },
                {
                    "id": 278,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/PowerTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 190,
            "demo": "Predicting Medical Expenses in Healthcare",
            "description": "Use a dataset containing variables like age, sex, BMI, smoking status, number of children, and region to build machine learning models that accurately predict healthcare costs for insurance policyholders, taking into account factors that affect medical expenses.",
            "subjects": [
                {
                    "id": 190,
                    "subject": "Healthcare"
                },
                {
                    "id": 190,
                    "subject": "Machine Learning"
                },
                {
                    "id": 190,
                    "subject": "Data Preparation"
                },
                {
                    "id": 190,
                    "subject": "Python"
                },
                {
                    "id": 190,
                    "subject": "teradataml OpenSourceML"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Health_Insurance/Health_Insurance_Costs_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 97,
            "demo": "Predictive Maintenance",
            "description": "Uses ML functions to predict failures to identify and mitigate potential machine failures before they occur.",
            "subjects": [
                {
                    "id": 97,
                    "subject": "Manufacturing"
                },
                {
                    "id": 97,
                    "subject": "Machine Learning"
                },
                {
                    "id": 97,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Predictive_Maintenance/Pop_Predictive_Maintenance_Python.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Predictive_Maintenance/Pop_Predictive_Maintenance_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Predictive_Maintenance/Predictive_Maintenance_Python.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 166,
            "demo": "Product Recommendation via AWS Bedrock",
            "description": "Use AWS Bedrock, Embedding from HuggingFace and Vantage in-DB functions to assist in providing product recommendations to develop a recipe assistant chatbot.",
            "subjects": [
                {
                    "id": 166,
                    "subject": "Retail"
                },
                {
                    "id": 166,
                    "subject": "Generative AI"
                },
                {
                    "id": 166,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 166,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Chat_Powered_Product_Recommendation/Chat_powered_product_recommendation_based_on_search_output.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 141,
            "demo": "Product Recommendations via Open Source",
            "description": "Uses FlagEmbedding from HuggingFace plus Vantage in-database functions to assess the vector distance between the product entered and similar products.",
            "subjects": [
                {
                    "id": 141,
                    "subject": "Generative AI"
                },
                {
                    "id": 141,
                    "subject": "Retail"
                },
                {
                    "id": 141,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Recommendations_product_search/Pop_Recommendations_product_search_OpenSource_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Recommendations_product_search/Recommendations_product_search_OpenSource_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 137,
            "demo": "Product Recommendations via OpenAI",
            "description": "Uses OpenAIEmbeddings and Vantage in-database function to assists consumers in receiving product recommendations",
            "subjects": [
                {
                    "id": 137,
                    "subject": "Generative AI"
                },
                {
                    "id": 137,
                    "subject": "Retail"
                },
                {
                    "id": 137,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Recommendations_product_search/Pop_Recommendations_product_search_OpenAI_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Recommendations_product_search/Recommendations_product_search_OpenAI_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 165,
            "demo": "Product Recommentations via TDApiClient",
            "description": "Build a product recommendation system using OpenAI embeddings and Vantage in db_function VectorDistance. We will also use Vantage as VectorDB, to store the embeddings.",
            "subjects": [
                {
                    "id": 165,
                    "subject": "Generative AI"
                },
                {
                    "id": 165,
                    "subject": "Retail"
                },
                {
                    "id": 165,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Recommendations_product_search/Recommendations_product_search_OpenAI_using_TDAPIClient_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 243,
            "demo": "QQNorm function in Vantage",
            "description": "Determine if values in a data column follow normal distribution or not.",
            "subjects": [
                {
                    "id": 243,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 243,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/QQNorm.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 115,
            "demo": "Query Service REST API",
            "description": "Demonstration of using REST API calls to Vantage which is useful for web or mobile applications to access and maintain data.",
            "subjects": [
                {
                    "id": 115,
                    "subject": "Developer Information"
                },
                {
                    "id": 115,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Query_Service/Query_Service.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Query_Service/Pop_Query_Service.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 216,
            "demo": "RAG Solution with Embedding/Chunking with Vantage and AWS Bedrock",
            "description": "Chunk PDFs, run embedding, try vector db style indexing in Vantage and then query Language Model with context/prompts after semantic search",
            "subjects": [
                {
                    "id": 216,
                    "subject": "Parallel CPU Inferencing"
                },
                {
                    "id": 216,
                    "subject": "Hugging Face"
                },
                {
                    "id": 216,
                    "subject": "Language Models"
                },
                {
                    "id": 216,
                    "subject": "Python"
                },
                {
                    "id": 216,
                    "subject": "AWS"
                },
                {
                    "id": 216,
                    "subject": "AWS Bedrock"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Language_Models_InVantage/Pop_RAG_and_Bedrock_QueryPDF.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Language_Models_InVantage/RAG_and_Bedrock_QueryPDF.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 217,
            "demo": "RAG Solution with Vantage Model Catalog and AWS Bedrock",
            "description": "Explore how to do extract data from metadata tables of Teradata using embedding and vector db style indexing in Vantage and then query LLM with context/prompts to get the details",
            "subjects": [
                {
                    "id": 217,
                    "subject": "Parallel CPU Inferencing"
                },
                {
                    "id": 217,
                    "subject": "Hugging Face"
                },
                {
                    "id": 217,
                    "subject": "Language Models"
                },
                {
                    "id": 217,
                    "subject": "Python"
                },
                {
                    "id": 217,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 217,
                    "subject": "AWS"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Language_Models_InVantage/RAG_and_Bedrock_Querycatalogue.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Language_Models_InVantage/Pop_RAG_and_Bedrock_Querycatalogue.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 344,
            "demo": "ROC Function in Vantage",
            "description": "Give the function a set of prediction-actual pairs for a binary classification model, and it will calculate values for a range of discrimination thresholds.",
            "subjects": [
                {
                    "id": 344,
                    "subject": "Python"
                },
                {
                    "id": 344,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ROC.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 302,
            "demo": "RandomProjectionMinComponents, RandomProjectionFit and RandomProjectionTransform Functions",
            "description": "Use these functions to perform dimensionality reduction of a dataset.",
            "subjects": [
                {
                    "id": 302,
                    "subject": "Python"
                },
                {
                    "id": 302,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/RandomProjectionFitandTransform_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 325,
            "demo": "RegressionEvaluator Function in Vantage",
            "description": "Compute metrics to evaluate and compare multiple models and summarizes how close predictions are to their expected values.",
            "subjects": [
                {
                    "id": 325,
                    "subject": "Python"
                },
                {
                    "id": 325,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/RegressionEvaluator.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 113,
            "demo": "Remaining Useful Life Forecasting",
            "description": "Applies machine learning to predict Remaining Useful Life (RUL) of jet engines, allowing scheduling of maintenance and replacement before failure occurs and reduces the cost of maintenance and replacement.",
            "subjects": [
                {
                    "id": 113,
                    "subject": "Manufacturing"
                },
                {
                    "id": 113,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 113,
                    "subject": "Machine Learning"
                },
                {
                    "id": 113,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Remaining_Useful_Life_Forecasting/Pop_Remaining_Useful_Life_Forecasting_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Remaining_Useful_Life_Forecasting/Remaining_Useful_Life_Forecasting_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 252,
            "demo": "Resample function in Vantage",
            "description": "Transform an irregular time series into a regular time series.",
            "subjects": [
                {
                    "id": 252,
                    "subject": "Retail"
                },
                {
                    "id": 252,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 252,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Resample.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 220,
            "demo": "Resume Classification Model Training using Vantage In-DB Functions",
            "description": "Use data from a collection of Resume Examples taken from kaggle for categorizing a given resume into any of the labels defined in the dataset. Summarize and ask questions using a ChatBot.",
            "subjects": [
                {
                    "id": 220,
                    "subject": "Machine Learning"
                },
                {
                    "id": 220,
                    "subject": "OpenAI"
                },
                {
                    "id": 220,
                    "subject": "Python"
                },
                {
                    "id": 220,
                    "subject": "Dashboard Notebook"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Resume_Analyzer/Introduction.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 84,
            "demo": "Retail Demand Forecasting",
            "description": "This creates an ARIMA time series model based on holidays and merchandising activities impacting store sales for a hypermarket retailer.",
            "subjects": [
                {
                    "id": 84,
                    "subject": "Time series analytics"
                },
                {
                    "id": 84,
                    "subject": "Retail"
                },
                {
                    "id": 84,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Retail_Demand_Forecasting/Pop_Retail_Demand_Forecasting_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Retail_Demand_Forecasting/Retail_Demand_Forecasting_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 316,
            "demo": "RoundColumns Function in Vantage",
            "description": "Convert the decimal precision of multiple columns to be the same.",
            "subjects": [
                {
                    "id": 316,
                    "subject": "Python"
                },
                {
                    "id": 316,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/RoundColumns.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 288,
            "demo": "RowNormalizeFit and RowNormalizeTransform Functions in Vantage",
            "description": "Discover how row-wise normalization can standardize financial metrics like CreditScore, Balance, and EstimatedSalary for better comparisons.",
            "subjects": [
                {
                    "id": 288,
                    "subject": "Python"
                },
                {
                    "id": 288,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 288,
                    "subject": "Finance"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/RowNormalizeFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 340,
            "demo": "SInfo Function in Vantage",
            "description": "Return details about each instance of a series found in a table.",
            "subjects": [
                {
                    "id": 340,
                    "subject": "Python"
                },
                {
                    "id": 340,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SInfo.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 64,
            "demo": "SQL Basics in Jupyter",
            "description": "This guide will walk you through writing your first SQL queries in Jupyter.  It uses some of the Vantage system tables as a source for the queries.",
            "subjects": [
                {
                    "id": 64,
                    "subject": "Developer Information"
                },
                {
                    "id": 64,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/SQL_Basics_in_Jupyter/Pop_SQL_Basics_in_Jupyter_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "Getting_Started/SQL_Basics_in_Jupyter/SQL_Basics_in_Jupyter_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 290,
            "demo": "SVM and SVMPredict Functions in Vantage.",
            "description": "Perform classification and regression analysis on datasets",
            "subjects": [
                {
                    "id": 290,
                    "subject": "Python"
                },
                {
                    "id": 290,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 290,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SVMandSVMPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 222,
            "demo": "Sales Forecasting using Teradata AUTOARIMA",
            "description": "Forecast the amount of future sales by developing a time-series modelling pipeline using Vantage and In-DB analytics",
            "subjects": [
                {
                    "id": 222,
                    "subject": "Python"
                },
                {
                    "id": 222,
                    "subject": "Retail"
                },
                {
                    "id": 222,
                    "subject": "ARIMA"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Sales_Forecasting_AutoArima/Sales_Forecasting_AutoArima_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 143,
            "demo": "Sales Forecasting using UAF",
            "description": "A detailed coverage of the analytic steps in sales forecasting including data preparation, exploration, seasonal normalizing, model creation, validation, and forecasting.",
            "subjects": [
                {
                    "id": 143,
                    "subject": "Hypothesis testing"
                },
                {
                    "id": 143,
                    "subject": "Descriptive Statistics"
                },
                {
                    "id": 143,
                    "subject": "Data Preparation"
                },
                {
                    "id": 143,
                    "subject": "Retail"
                },
                {
                    "id": 143,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Sales_Forecasting_UAF/Sales_Forecasting_UAF_PY_SQL.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 149,
            "demo": "Sales Forecasting with Vantage vs SAS",
            "description": "This demo walks through how a typical SAS user would use sales data to build a simple sales forecasting model and then will showcase how we can achieve the same using Vantage ClearScape Analytics.",
            "subjects": [
                {
                    "id": 149,
                    "subject": "SQL"
                },
                {
                    "id": 149,
                    "subject": "SAS"
                },
                {
                    "id": 149,
                    "subject": "Python"
                },
                {
                    "id": 149,
                    "subject": "Machine Learning"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/SalesForecast_SAS_Vantage/Sales_Forecasting_SAS_Vantage_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/SalesForecast_SAS_Vantage/Pop_Sales_Forecasting_SAS_Vantage_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/SalesForecast_SAS_Vantage/Pop_Sales_Forecasting_SAS_Vantage_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/SalesForecast_SAS_Vantage/Sales_Forecasting_SAS_Vantage_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 287,
            "demo": "ScaleFit and ScaleTransform Functions in Vantage",
            "description": "Standardize values to a comparable range, making them suitable for machine learning models without being influenced by original magnitudes.",
            "subjects": [
                {
                    "id": 287,
                    "subject": "Python"
                },
                {
                    "id": 287,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 287,
                    "subject": "Finance"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ScaleFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 265,
            "demo": "Search all notebooks with a ChatBot",
            "description": "Run this notebook to search all notebooks with a ChatBot.",
            "subjects": [
                {
                    "id": 265,
                    "subject": "Python"
                },
                {
                    "id": 265,
                    "subject": "OpenAI"
                },
                {
                    "id": 265,
                    "subject": "ExperienceBot"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ExperienceBot/ExperienceBot_NoCode.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 266,
            "demo": "Search all notebooks with a ChatBot using Vantage",
            "description": "Run this notebook to search all notebooks with a ChatBot and Database connectivity.",
            "subjects": [
                {
                    "id": 266,
                    "subject": "Python"
                },
                {
                    "id": 266,
                    "subject": "OpenAI"
                },
                {
                    "id": 266,
                    "subject": "ExperienceBot"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "ExperienceBot/ExperienceBot.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 255,
            "demo": "SeasonalNormalize and Unnormalize functions in Vantage",
            "description": "Take a non-stationary series and normalize it.  Then unnormalize the series to produce a forcasted series.",
            "subjects": [
                {
                    "id": 255,
                    "subject": "Retail"
                },
                {
                    "id": 255,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 255,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SeasonalNormalize_UnNormalize.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 333,
            "demo": "SelectionCriteria Function in Vantage",
            "description": "Choose the best algorithm or model from a set of candidate models for a given dataset.",
            "subjects": [
                {
                    "id": 333,
                    "subject": "Python"
                },
                {
                    "id": 333,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SelectionCriteria.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 218,
            "demo": "Semantic Clustering using OpenSource Language Models",
            "description": "Bring a language model into Vantage and run NLP models in the database",
            "subjects": [
                {
                    "id": 218,
                    "subject": "Parallel CPU Inferencing"
                },
                {
                    "id": 218,
                    "subject": "Hugging Face"
                },
                {
                    "id": 218,
                    "subject": "Language Models"
                },
                {
                    "id": 218,
                    "subject": "Python"
                },
                {
                    "id": 218,
                    "subject": "Open Source"
                },
                {
                    "id": 218,
                    "subject": "Complaints Clustering"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Language_Models_InVantage/Pop_Semantic_Clustering_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Language_Models_InVantage/Semantic_Clustering_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 219,
            "demo": "Semantic Similarity using OpenSource Language Models",
            "description": "Run Hugging Face Embedding Model in ONNX format to create some embeddings from a Consumer Complaints dataset",
            "subjects": [
                {
                    "id": 219,
                    "subject": "Parallel CPU Inferencing"
                },
                {
                    "id": 219,
                    "subject": "Hugging Face"
                },
                {
                    "id": 219,
                    "subject": "Language Models"
                },
                {
                    "id": 219,
                    "subject": "Python"
                },
                {
                    "id": 219,
                    "subject": "Open Source"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Language_Models_InVantage/Semantic_Similarity_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Language_Models_InVantage/Pop_Semantic_Similarity_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 29,
            "demo": "Sensor Data Analytics",
            "description": "Creative application of geospatial to locations of sensors in  a research lab and integration of data from tables with detailed recordings on cloud storage.",
            "subjects": [
                {
                    "id": 29,
                    "subject": "Geospatial"
                },
                {
                    "id": 29,
                    "subject": "Object Storage"
                },
                {
                    "id": 29,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Sensor_Data_Analytics/Sensor_Data_Analytics_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Sensor_Data_Analytics/Pop_Sensor_Data_Analytics_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                }
            ]
        },
        {
            "id": 204,
            "demo": "Sentiment Analysis with Google Gemini",
            "description": "Extract insights from unstructured data to identify and address customer concerns.",
            "subjects": [
                {
                    "id": 204,
                    "subject": "Google"
                },
                {
                    "id": 204,
                    "subject": "Google Gemini"
                },
                {
                    "id": 204,
                    "subject": "Large Language Models"
                },
                {
                    "id": 204,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 204,
                    "subject": "Python"
                },
                {
                    "id": 204,
                    "subject": "Sentiment Analysis"
                },
                {
                    "id": 204,
                    "subject": "Polarity Classification"
                },
                {
                    "id": 204,
                    "subject": "Emotion Detection"
                },
                {
                    "id": 204,
                    "subject": "Aspect-Based Sentiment Analysis"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Sentiment_Analysis.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Sentiment_Analysis.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 212,
            "demo": "Sentiment Analysis with OpenAI",
            "description": "Extract insights from unstructured data to identify and address customer concerns.",
            "subjects": [
                {
                    "id": 212,
                    "subject": "Generative AI"
                },
                {
                    "id": 212,
                    "subject": "Large Language Models"
                },
                {
                    "id": 212,
                    "subject": "Python"
                },
                {
                    "id": 212,
                    "subject": "Azure"
                },
                {
                    "id": 212,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 212,
                    "subject": "OpenAI"
                },
                {
                    "id": 212,
                    "subject": "Sentiment Analysis"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Sentiment_Analysis.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Sentiment_Analysis.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 297,
            "demo": "SentimentExtractor Function in Vantage",
            "description": "Search a customer's comments and evaluate the sentiments. Return a list of sentiment words along with their scores.",
            "subjects": [
                {
                    "id": 297,
                    "subject": "Python"
                },
                {
                    "id": 297,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 297,
                    "subject": "Retail"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SentimentExtractor.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 369,
            "demo": "ServiceNow Multipath Pattern Analysis",
            "description": "Use Vantage's nPath\u00ae functionality to unlock critical insights from a case history.",
            "subjects": [
                {
                    "id": 369,
                    "subject": "New"
                },
                {
                    "id": 369,
                    "subject": "Python"
                },
                {
                    "id": 369,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 369,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 369,
                    "subject": "Hugging Face"
                },
                {
                    "id": 369,
                    "subject": "Telco"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/ServiceNow_Multipath_PatternAnalysis/ServiceNow_Multipath_PatternAnalysis_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 279,
            "demo": "Sessionize Function in Vantage",
            "description": "Examine user behavior over a 24 hour time span using clickstream data.",
            "subjects": [
                {
                    "id": 279,
                    "subject": "Python"
                },
                {
                    "id": 279,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Sessionize.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 161,
            "demo": "Shipping Time Prediction",
            "description": "Use ClearScape Analytics to develop a robust system that can reliably estimate delivery dates, accounting for handling time, transit time, and other relevant variables affecting the actual delivery timeframe.",
            "subjects": [
                {
                    "id": 161,
                    "subject": "SQL"
                },
                {
                    "id": 161,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 161,
                    "subject": "Machine Learning"
                },
                {
                    "id": 161,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Shipping_Time_Prediction/Shipping_Time_Prediction_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 157,
            "demo": "Signal Processing and Classification",
            "description": "Use the Unbounded Array Framework in ClearScape Analytics to classify sonar signals. Extract and engineer features to use in training and scoring our models.",
            "subjects": [
                {
                    "id": 157,
                    "subject": "Python"
                },
                {
                    "id": 157,
                    "subject": "Unbounded Array Framework"
                },
                {
                    "id": 157,
                    "subject": "Defense"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Signal_Processing_and_Classification/Signal_Processing_and_Classification_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 332,
            "demo": "SignifPeriodicities Function in Vantage",
            "description": "Detecting significant periodicities in time series data is crucial for accurate forecasting, especially in industries such as retail or finance, where it impacts decision making.",
            "subjects": [
                {
                    "id": 332,
                    "subject": "Python"
                },
                {
                    "id": 332,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SignifPeriodicities.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 330,
            "demo": "SignifResidmean Function in Vantage",
            "description": "Use a statistical test to determine if a passed-in residual series can be classified as being white noise.",
            "subjects": [
                {
                    "id": 330,
                    "subject": "Python"
                },
                {
                    "id": 330,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SignifResidmean.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 326,
            "demo": "Silhouette Function in Vantage",
            "description": "Determines the similarity of an object to its cluster (cohesion) compared to other clusters (separation).",
            "subjects": [
                {
                    "id": 326,
                    "subject": "Python"
                },
                {
                    "id": 326,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Silhouette.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 336,
            "demo": "SimpleExp Function in Vantage",
            "description": "Use simple exponential smoothing with time series data to generate forecast with minimal computations.",
            "subjects": [
                {
                    "id": 336,
                    "subject": "Python"
                },
                {
                    "id": 336,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SimpleExp.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 249,
            "demo": "SimpleImputeFit and SimpleImputeTransform functions in Vantage",
            "description": "Use the two functions to impute missing values in a dataset.",
            "subjects": [
                {
                    "id": 249,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 249,
                    "subject": "Finance"
                },
                {
                    "id": 249,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/SimpleImputeFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 366,
            "demo": "Simplify Text Analytics with Teradata Python for Generative AI",
            "description": "The teradatagenai Python library enables everyone to run analytics on their unstructured data directly within GPU Compute Cluster in VantageCloud Lake.",
            "subjects": [
                {
                    "id": 366,
                    "subject": "Python"
                },
                {
                    "id": 366,
                    "subject": "Open Analytics Framework"
                },
                {
                    "id": 366,
                    "subject": "AWS"
                },
                {
                    "id": 366,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 366,
                    "subject": "Possible 2025"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "VantageCloud_Lake/UseCases/Text_Analytics_teradatagenai_AWS/text_analytics_teradatagenai_aws_huggingface.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 253,
            "demo": "Smoothma function in Vantage",
            "description": "Apply smoothing to a time series to highlight the mean of that series.",
            "subjects": [
                {
                    "id": 253,
                    "subject": "Manufacturing"
                },
                {
                    "id": 253,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 253,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Smoothma.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 347,
            "demo": "Solve Imbalance Class Problems with ClearScape Analytics",
            "description": "How to address imbalanced classes and build better models.",
            "subjects": [
                {
                    "id": 347,
                    "subject": "Python"
                },
                {
                    "id": 347,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/Imbalanced_Data_Handling/Solve_Imbalance_Class_Problems.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 230,
            "demo": "Solve complex inventory issues with Vantage In-DB functions.",
            "description": "Use resampling to fill-in missing data, find phantom inventory, show key inventory metrics, calculate safe stock levels.",
            "subjects": [
                {
                    "id": 230,
                    "subject": "Retail"
                },
                {
                    "id": 230,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Inventory_Management/Inventory_Management_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 194,
            "demo": "Speech Recognition and Sentiment Analysis with AWS Bedrock",
            "description": "Analyzing consumer complaints using audio files conversations",
            "subjects": [
                {
                    "id": 194,
                    "subject": "Python"
                },
                {
                    "id": 194,
                    "subject": "Large Language Models"
                },
                {
                    "id": 194,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 194,
                    "subject": "AWS"
                },
                {
                    "id": 194,
                    "subject": "Customer Complaint Analysis"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Speech_Recognition.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Speech_Recognition.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 205,
            "demo": "Speech Recognition and Sentiment Analysis with Google Gemini",
            "description": "Analyzing consumer complaints using audio files conversations",
            "subjects": [
                {
                    "id": 205,
                    "subject": "Google"
                },
                {
                    "id": 205,
                    "subject": "Google Gemini"
                },
                {
                    "id": 205,
                    "subject": "Large Language Models"
                },
                {
                    "id": 205,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 205,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Speech_Recognition.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Speech_Recognition.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 213,
            "demo": "Speech Recognition and Sentiment Analysis with OpenAI",
            "description": "Analyzing consumer complaints using audio files conversations",
            "subjects": [
                {
                    "id": 213,
                    "subject": "Generative AI"
                },
                {
                    "id": 213,
                    "subject": "Large Language Models"
                },
                {
                    "id": 213,
                    "subject": "Python"
                },
                {
                    "id": 213,
                    "subject": "Azure"
                },
                {
                    "id": 213,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 213,
                    "subject": "OpenAI"
                },
                {
                    "id": 213,
                    "subject": "Sentiment Analysis"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Speech_Recognition.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Speech_Recognition.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 134,
            "demo": "Store Sales Forecast via ARIMA",
            "description": "Forecasts total store sales using ARIMA (AutoRegressive Integrated Moving Average)",
            "subjects": [
                {
                    "id": 134,
                    "subject": "Retail"
                },
                {
                    "id": 134,
                    "subject": "Machine Learning"
                },
                {
                    "id": 134,
                    "subject": "Marketing"
                },
                {
                    "id": 134,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Store_Sales_Forecasting_ARIMA/Store_Sales_Forecasting_ARIMA_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Store_Sales_Forecasting_ARIMA/Pop_Store_Sales_Forecasting_ARIMA_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 133,
            "demo": "Store Sales Forecast via Prophet",
            "description": "Uses the Script Table Operator (STO) to run the H20 machine learning library as an extension to ClearScape Analytics.  H20 runs in parallel inside the Vantage database without exporting data to another platform.",
            "subjects": [
                {
                    "id": 133,
                    "subject": "Retail"
                },
                {
                    "id": 133,
                    "subject": "Machine Learning"
                },
                {
                    "id": 133,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Store_Sales_Forecasting_Prophet_STO/Pop_Store_Sales_Forecasting_Prophet_STO_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Store_Sales_Forecasting_Prophet_STO/Store_Sales_Forecasting_Prophet_STO_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                }
            ]
        },
        {
            "id": 319,
            "demo": "StrApply Function in Vantage",
            "description": "Manipulate a tring by applying a regular expression pattern as well as other standard string operators.",
            "subjects": [
                {
                    "id": 319,
                    "subject": "Python"
                },
                {
                    "id": 319,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/StrApply.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 221,
            "demo": "Streamlining Analytics with Hyper-Segmented Models",
            "description": "By addressing unique customer behaviors and preferences within specific micro-segments, enhance customer satisfaction, boost operational efficiency, and improve profitability by to deploying and managing hyper-segmented models at scale.",
            "subjects": [
                {
                    "id": 221,
                    "subject": "Python"
                },
                {
                    "id": 221,
                    "subject": "Language Models"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Hyper_Segmented_Models/Hyper_Segmented_Models.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 299,
            "demo": "StringSimilarity Function in Vantage",
            "description": "Calculates the similarity between two strings, using the specified comparison method (jaro, cosine etc).",
            "subjects": [
                {
                    "id": 299,
                    "subject": "Python"
                },
                {
                    "id": 299,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/StringSimilarity.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 150,
            "demo": "Supply Chain Visibility",
            "description": "Shows the integration of data from warehouse, trucking company, and customer Order Management Systems (OMS) using temporal  to reconcile different update frequencies and show rerouting when warehouse is unavailable.",
            "subjects": [
                {
                    "id": 150,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 150,
                    "subject": "Geospatial"
                },
                {
                    "id": 150,
                    "subject": "Time series analytics"
                },
                {
                    "id": 150,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Supply_Chain_Visibility/Supply_Chain_Visibility_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Supply_Chain_Visibility/Pop_Supply_Chain_Visibility_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 231,
            "demo": "TD GeoDataFrame to ESRI Conversion",
            "description": "Extract Teradata geospatial data and export it into widely-used formats such as ESRI shapefiles.",
            "subjects": [
                {
                    "id": 231,
                    "subject": "Geospatial"
                },
                {
                    "id": 231,
                    "subject": "Vantage Database Functions"
                },
                {
                    "id": 231,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/TD_Geo_Esri/TD_Geo_Esri.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 300,
            "demo": "TargetEncodingFit and TargetEncodingTransform Functions in Vantage",
            "description": "Apply Target Encoding to replace categorical values with statistically meaningful numerical representations based on the churn rate (Exited).",
            "subjects": [
                {
                    "id": 300,
                    "subject": "Python"
                },
                {
                    "id": 300,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 300,
                    "subject": "Finance"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/TargetEncodingFitandTransform.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 151,
            "demo": "Telco 5G Quality of Experience",
            "description": "Quality of service analysis of 5G vs 4G video for different situations such as Indoor, outdoor, and moble.",
            "subjects": [
                {
                    "id": 151,
                    "subject": "SQL"
                },
                {
                    "id": 151,
                    "subject": "Telco"
                },
                {
                    "id": 151,
                    "subject": "Machine Learning"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Telco_5G_QOE_Analysis/Pop_Telco_5G_QOE_Analysis_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_5G_QOE_Analysis/Telco_5G_QOE_Analysis_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 226,
            "demo": "Telco Churn using Enterprise Feature Store",
            "description": "analyzing a time series of data, where each data point represents the outstanding amount at the end of each month. To detect anomalies,",
            "subjects": [
                {
                    "id": 226,
                    "subject": "Telco"
                },
                {
                    "id": 226,
                    "subject": "Python"
                },
                {
                    "id": 226,
                    "subject": "EFS"
                },
                {
                    "id": 226,
                    "subject": "AutoML"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/EFS_Demo/Telco_Churn_using_EFS.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 233,
            "demo": "Telco Churn using Feature Store in Vantage",
            "description": "Detect anomalies in monthly bill amounts to detect and prevent churn using pre-calculated features stored in Vantage.",
            "subjects": [
                {
                    "id": 233,
                    "subject": "Telco"
                },
                {
                    "id": 233,
                    "subject": "Python"
                },
                {
                    "id": 233,
                    "subject": "EFS"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/EFS_Demo/Telco_Churn_using_tdfs4ds_Feature_Store.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 93,
            "demo": "Telco Customer Churn",
            "description": "This uses logistic regression for supervised learning to predict the probability of a customer switching vendors based on usage patterns, billing information demographics and interactions. XGBoost is then used in database to improve the prediction.",
            "subjects": [
                {
                    "id": 93,
                    "subject": "Telco"
                },
                {
                    "id": 93,
                    "subject": "Machine Learning"
                },
                {
                    "id": 93,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Telco_Customer_Churn/Pop_Telco_Customer_Churn_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "Web",
                    "url": "https://storage.googleapis.com/clearscape_analytics_videos/ClearScape%20Analytics%20Experience%20-%20Telco%20Customer%20Churn%20Use%20Case%20Demo%20-%20External%20-%20SP004520.MP4",
                    "label": "Video"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_Customer_Churn/Telco_Customer_Churn_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 372,
            "demo": "Telco Customer Churn Using Enterprise Feature Store (EFS)",
            "description": "Use the massive parallel architecture of Teradata Vantage to prepare data, train, evaluate, and deploy models at unprecedented scale.",
            "subjects": [
                {
                    "id": 372,
                    "subject": "New"
                },
                {
                    "id": 372,
                    "subject": "Python"
                },
                {
                    "id": 372,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 372,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 372,
                    "subject": "EFS"
                },
                {
                    "id": 372,
                    "subject": "Telco"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_EFS/Telco_Customer_Churn_EFS.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 373,
            "demo": "Telco Customer Churn using the GLM Function",
            "description": "Use Teradata's machine learning and predictive analytics to build a model to predict customers which are likely to churn in the future.",
            "subjects": [
                {
                    "id": 373,
                    "subject": "New"
                },
                {
                    "id": 373,
                    "subject": "Python"
                },
                {
                    "id": 373,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 373,
                    "subject": "teradataml OpenSourceML"
                },
                {
                    "id": 373,
                    "subject": "Possible 2025"
                },
                {
                    "id": 373,
                    "subject": "Telco"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_Customer_Churn/Telco_Customer_Churn_GLM_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 48,
            "demo": "Telco Network Coverage",
            "description": "Demonstrates the ability of Geospatial to show signal strength, coverage areas and travel path of customers through cell tower coverage area.",
            "subjects": [
                {
                    "id": 48,
                    "subject": "Geospatial"
                },
                {
                    "id": 48,
                    "subject": "Telco"
                },
                {
                    "id": 48,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Telco_Network_Coverage/Telco_Network_Coverage_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Telco_Network_Coverage/Pop_Telco_Network_Coverage_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 360,
            "demo": "Telco_Customer_Churn_AutoML_Approach.ipynb",
            "description": "Step through an automated approach of building models to identify and predict customer churn.",
            "subjects": [
                {
                    "id": 360,
                    "subject": "Python"
                },
                {
                    "id": 360,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 360,
                    "subject": "End-to-End"
                },
                {
                    "id": 360,
                    "subject": "AutoML"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Telco_Customer_Churn/Telco_EndtoEnd_ModelOps_GIT_Python_indb_AutoML.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 358,
            "demo": "Telco_Customer_Churn_Traditional_Approach.ipynb",
            "description": "Step through a traditional approach of building models to identify and predict customer churn.",
            "subjects": [
                {
                    "id": 358,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Telco_Customer_Churn/Telco_Customer_Churn_AutoML_Approach.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 359,
            "demo": "Telco_EndtoEnd_ModelOps_GIT_Python_indb_DF.ipynb",
            "description": "Step through a traditional approach of building models to identify and predict customer churn and storing them in the database.",
            "subjects": [
                {
                    "id": 359,
                    "subject": "Python"
                },
                {
                    "id": 359,
                    "subject": "Telco"
                },
                {
                    "id": 359,
                    "subject": "End-to-End"
                },
                {
                    "id": 359,
                    "subject": "ModelOps"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Teradata_End_to_End_Demos/Telco_Customer_Churn/Telco_Customer_Churn_Traditional_Approach.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 181,
            "demo": "Teradata Package for R Basics",
            "description": "Discoverer how the Teradata Package for R (tdplyr) allows users to develop and run R programs to take advantage of Big Data and Machine Learning analytic capabilities of Vantage.",
            "subjects": [
                {
                    "id": 181,
                    "subject": "R"
                },
                {
                    "id": 181,
                    "subject": "Developer Information"
                }
            ],
            "links": [
                {
                    "type": "Web",
                    "url": "Getting_Started/tdplyr_R_Basics/tdplyr_R_Basics.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 355,
            "demo": "Teradata Use Case Solution Offerings",
            "description": "Find out how Teradata can help you deliver better customer experience, build customer loyalty, and accelerate value leveraging the most powerful, open, and connected AI/ML capabilities on the market through our use case solution offerings",
            "subjects": [
                {
                    "id": 355,
                    "subject": "Demo Introduction"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "BusinessSolutions/BusinessSolutionsOfferings.ipynb",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 44,
            "demo": "Text Term Frequency",
            "description": "Use NGram splitter to analyze comments  retail products to determine patterns of words used to describe products.",
            "subjects": [
                {
                    "id": 44,
                    "subject": "Text Analysis"
                },
                {
                    "id": 44,
                    "subject": "Retail"
                },
                {
                    "id": 44,
                    "subject": "Python"
                },
                {
                    "id": 44,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Text_Term_Frequency/Text_Term_Frequency_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Text_Term_Frequency/Text_Term_Frequency_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Text_Term_Frequency/Pop_Text_Term_Frequency_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Text_Term_Frequency/Pop_Text_Term_Frequency_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Text_Term_Frequency/Text_Term_Frequency_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Text_Term_Frequency/Pop_Text_Term_Frequency_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                }
            ]
        },
        {
            "id": 303,
            "demo": "TextParser Function in Vantage",
            "description": "Use this function to parse text by removing punctuation, stop words and then tokenize the remaining text.",
            "subjects": [
                {
                    "id": 303,
                    "subject": "Python"
                },
                {
                    "id": 303,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/TextParser.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 199,
            "demo": "Topic Modelling with AWS Bedrock",
            "description": "Uncover hidden insights from vast amounts of consumer complaints data to enable the identification of trends.",
            "subjects": [
                {
                    "id": 199,
                    "subject": "AWS Bedrock"
                },
                {
                    "id": 199,
                    "subject": "AWS"
                },
                {
                    "id": 199,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 199,
                    "subject": "Large Language Models"
                },
                {
                    "id": 199,
                    "subject": "Python"
                },
                {
                    "id": 199,
                    "subject": "Topic Modelling"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Bedrock/Pop_Topic_Modelling.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Bedrock/Topic_Modelling.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 206,
            "demo": "Topic Modelling with Google Gemini",
            "description": "Uncover hidden insights from vast amounts of consumer complaints data to enable the identification of trends.",
            "subjects": [
                {
                    "id": 206,
                    "subject": "Google"
                },
                {
                    "id": 206,
                    "subject": "Google Gemini"
                },
                {
                    "id": 206,
                    "subject": "Large Language Models"
                },
                {
                    "id": 206,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 206,
                    "subject": "Python"
                },
                {
                    "id": 206,
                    "subject": "Topic Modelling"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_GenAI_Gemini/Pop_Topic_Modelling.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_GenAI_Gemini/Topic_Modelling.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 214,
            "demo": "Topic Modelling with OpenAI",
            "description": "Uncover hidden insights from vast amounts of consumer complaints data to enable the identification of trends.",
            "subjects": [
                {
                    "id": 214,
                    "subject": "Generative AI"
                },
                {
                    "id": 214,
                    "subject": "Large Language Models"
                },
                {
                    "id": 214,
                    "subject": "Python"
                },
                {
                    "id": 214,
                    "subject": "Azure"
                },
                {
                    "id": 214,
                    "subject": "Customer Complaint Analysis"
                },
                {
                    "id": 214,
                    "subject": "OpenAI"
                },
                {
                    "id": 214,
                    "subject": "Topic Modelling"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Complaints_Analysis_Azure_OpenAI/Pop_Topic_Modelling.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Complaints_Analysis_Azure_OpenAI/Topic_Modelling.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 341,
            "demo": "TrackingOp Function in Vantage",
            "description": "Use geospatial coordinates to track an object's movement and calculate related metrics.",
            "subjects": [
                {
                    "id": 341,
                    "subject": "Python"
                },
                {
                    "id": 341,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/TrackingOp.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 105,
            "demo": "Train Delay Path Analysis",
            "description": "Uses nPath displays to show relationship of delays and predictive models to anticipate potential delays and enable proactive planning.",
            "subjects": [
                {
                    "id": 105,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 105,
                    "subject": "Machine Learning"
                },
                {
                    "id": 105,
                    "subject": "Path Analytics"
                },
                {
                    "id": 105,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Train_Delay/Train_Delay_Python.ipynb",
                    "label": "Python Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Train_Delay/Pop_Train_Delay_Python.ipynb",
                    "label": "Read Only Python"
                }
            ]
        },
        {
            "id": 304,
            "demo": "TrainTestSplit Function in Vantage",
            "description": "Divide a dataset for training and testing a model.",
            "subjects": [
                {
                    "id": 304,
                    "subject": "Python"
                },
                {
                    "id": 304,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/TrainTestSplit.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 183,
            "demo": "Tutorial on using Teradataml Widgets",
            "description": "Use Teradataml Widgets to display interactive prompting to generate datasets from the Vantage database.",
            "subjects": [
                {
                    "id": 183,
                    "subject": "Python"
                },
                {
                    "id": 183,
                    "subject": "Developer Information"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/Teradataml_Widgets/Tutorial.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 246,
            "demo": "UnivariateStatistics function in Vantage",
            "description": "Use the UnivariateStatistics function available in Vantage  to explore the descriptive statistics of a dataset",
            "subjects": [
                {
                    "id": 246,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 246,
                    "subject": "Finance"
                },
                {
                    "id": 246,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/UnivariateStatistics.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 365,
            "demo": "Unstructured Text Analysis With BYO-LLM and NVIDIA GPU Acceleration",
            "description": "The teradatagenai Python library enables everyone to run analytics on their unstructured data directly within GPU Compute Cluster in VantageCloud Lake.",
            "subjects": [
                {
                    "id": 365,
                    "subject": "Python"
                },
                {
                    "id": 365,
                    "subject": "Open Analytics Framework"
                },
                {
                    "id": 365,
                    "subject": "AWS"
                },
                {
                    "id": 365,
                    "subject": "AWS Bedrock"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "VantageCloud_Lake/UseCases/Entity_Recognition_BYOLLM/Entity_Recogntion_BYOLLM_VCL.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 158,
            "demo": "Using ClearScape Analytics with openAI",
            "description": "To ensure optimal utilization of the OpenAI API in generative AI notebooks, it is essential to establish the API keys correctly. This concise guide outlines the process of configuring OpenAI API keys for seamless integration across multiple notebooks.",
            "subjects": [
                {
                    "id": 158,
                    "subject": "Developer Information"
                },
                {
                    "id": 158,
                    "subject": "OpenAI"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Openai_setup_api_key/Openai_setup_api_key.md",
                    "label": "Information"
                }
            ]
        },
        {
            "id": 236,
            "demo": "Using Pearson's chi-squared test function in Vantage",
            "description": "Use the Vantage implementation of Pearson's chi-square test to compare goodness of fit, homogeneity, and independence.",
            "subjects": [
                {
                    "id": 236,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 236,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ChiSq.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 235,
            "demo": "Using the Analysis of Variance (Anova) function in Vantage",
            "description": "Use the Anova function to execute a statistical test to analyze the difference between the means of more than two groups",
            "subjects": [
                {
                    "id": 235,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 235,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/Anova.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 227,
            "demo": "Using the Vantage Enterprise Feature Store Functions",
            "description": "Work through a series of practical exercises that demonstrate how to use the Enterprise Feature Store capabilities in Vantage.\u00a0",
            "subjects": [
                {
                    "id": 227,
                    "subject": "First Time User"
                },
                {
                    "id": 227,
                    "subject": "Python"
                },
                {
                    "id": 227,
                    "subject": "EFS"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "FeaturePreview/Enterprise_Feature_Store/EFS_Getting_Started_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 21,
            "demo": "VAL Analytics and ML",
            "description": "Demonstration of Vantage Analytic Library scoring and analytic functions like linear regression, decision trees, K-Means clustering, Factor Analysis, etc.",
            "subjects": [
                {
                    "id": 21,
                    "subject": "Machine Learning"
                },
                {
                    "id": 21,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Vantage_Analytics_Library/VAL_Analytics_and_ML_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Vantage_Analytics_Library/Pop_VAL_Analytics_and_ML_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 18,
            "demo": "VAL Descriptive Statistics",
            "description": "This performs in-database analysis of data values, distribution, histograms, and text field analysis using SQL to access the Vantage Analytics Library.",
            "subjects": [
                {
                    "id": 18,
                    "subject": "Descriptive Statistics"
                },
                {
                    "id": 18,
                    "subject": "Text Analysis"
                },
                {
                    "id": 18,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Vantage_Analytics_Library/VAL_Descriptive_Statistics_SQL.ipynb",
                    "label": "SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Vantage_Analytics_Library/Pop_VAL_Descriptive_Statistics_SQL.ipynb",
                    "label": "Read Only SQL"
                }
            ]
        },
        {
            "id": 19,
            "demo": "VAL Hypothesis Tests",
            "description": "This demonstrates a subset of the 18 hypothesis test in the Vantage Analytics library  using SQL such as Parametric, Binomial, Kolmogorov/Smirnoff, Rank, etc.",
            "subjects": [
                {
                    "id": 19,
                    "subject": "Hypothesis testing"
                },
                {
                    "id": 19,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Vantage_Analytics_Library/Pop_VAL_Hypothesis_Tests_SQL.ipynb",
                    "label": "Read Only SQL"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Vantage_Analytics_Library/VAL_Hypothesis_Tests_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 65,
            "demo": "VAL Overview",
            "description": "Vantage Analytics Library (VAL) is a set of over 50 functions for advanced analytics. This provides an overview and links to an 8 minute video overview.",
            "subjects": [
                {
                    "id": 65,
                    "subject": "Developer Information"
                },
                {
                    "id": 65,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Vantage_Analytics_Library/VAL_Overview_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 46,
            "demo": "VAL teradataml Demo",
            "description": "Demonstrated the use of Teradataml in Python to perform descriptive statistics, transformation, model building model evaluation and scoring.",
            "subjects": [
                {
                    "id": 46,
                    "subject": "Descriptive Statistics"
                },
                {
                    "id": 46,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Vantage_Analytics_Library/Pop_VAL_teradataml_Demo_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "UseCases/Vantage_Analytics_Library/VAL_teradataml_Demo_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 88,
            "demo": "Vantage Query Log Analysis",
            "description": "Analysis of sessions and queries  you executed using the built-in logging facilities of Vantage.",
            "subjects": [
                {
                    "id": 88,
                    "subject": "Time series analytics"
                },
                {
                    "id": 88,
                    "subject": "Developer Information"
                },
                {
                    "id": 88,
                    "subject": "SQL"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Vantage_Query_Log_Analysis/Vantage_Query_Log_Analysis_SQL.ipynb",
                    "label": "SQL Version"
                }
            ]
        },
        {
            "id": 353,
            "demo": "Variational AutoEncoders (VAE) in Generative AI",
            "description": "Define a model, define a loss function, train the model, generate new images and then enhance the quality.",
            "subjects": [
                {
                    "id": 353,
                    "subject": "Python"
                },
                {
                    "id": 353,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/VAE/VAE_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 342,
            "demo": "VectorDistance Function in Vantage",
            "description": "Compute similarity or dissimilarity between two vectors in multi-dimensional space.",
            "subjects": [
                {
                    "id": 342,
                    "subject": "Python"
                },
                {
                    "id": 342,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/VectorDistance.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 152,
            "demo": "Vehicle Routing for Delivery",
            "description": "Demonstrates advanced analytics to find lowest cost routes to deliver a large volume of packages by a fleet of vehicles.",
            "subjects": [
                {
                    "id": 152,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 152,
                    "subject": "Travel & Transportation"
                },
                {
                    "id": 152,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Vehicle_Routing_Delivery/Vehicle_Routing_Delivery_STO_PY_SQL.ipynb",
                    "label": "Python-SQL Version"
                },
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/UseCases/Vehicle_Routing_Delivery/Pop_Vehicle_Routing_Delivery_STO_PY_SQL.ipynb",
                    "label": "Read Only Python-SQL"
                }
            ]
        },
        {
            "id": 59,
            "demo": "Vertex AI Integration",
            "description": " In this tutorial, we will show how to integrate Vantage Analytics capabilities  in Vertex AI ML Pipelines. Vertex AI is the environment for data scientists to deploy ML models.",
            "subjects": [
                {
                    "id": 59,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 59,
                    "subject": "Machine Learning"
                },
                {
                    "id": 59,
                    "subject": "Vertex AI"
                },
                {
                    "id": 59,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "UseCases/Vertex_AI_Integration/Vertex_AI_Integration_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 349,
            "demo": "Video Analyzer with Google Gemini",
            "description": "Observe how Gemini 2.0 can be leveraged to generate details about events happening in videos and return those details as readable text.",
            "subjects": [
                {
                    "id": 349,
                    "subject": "Python"
                },
                {
                    "id": 349,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 349,
                    "subject": "Google Gemini"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/Video_Processing_using_Gemini/Video_processing_Gemini.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 247,
            "demo": "WhichMax function in Vantage",
            "description": "Use the WhichMax function to explore a dataset.  Displays all rows that have the maximum value in a specified input table column.",
            "subjects": [
                {
                    "id": 247,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 247,
                    "subject": "Finance"
                },
                {
                    "id": 247,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/WhichMax.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 248,
            "demo": "WhichMin function in Vantage",
            "description": "Use the WhichMin function to return a specified minimum value in a specified table's column.",
            "subjects": [
                {
                    "id": 248,
                    "subject": "ClearScape Analytic Functions"
                },
                {
                    "id": 248,
                    "subject": "Finance"
                },
                {
                    "id": 248,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/WhichMin.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 310,
            "demo": "WhitesGeneral Function in Vantage",
            "description": "Check for the presence of correlation among residual terms after running a regression.",
            "subjects": [
                {
                    "id": 310,
                    "subject": "Python"
                },
                {
                    "id": 310,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/WhitesGeneral.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 343,
            "demo": "WordEmbeddings Function in Vantage",
            "description": "Produce vectors for each piece of text and find the fimilarities between those pieces.",
            "subjects": [
                {
                    "id": 343,
                    "subject": "Python"
                },
                {
                    "id": 343,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/WordEmbeddings.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 305,
            "demo": "XGBoost and XGBoostPredict Functions in Vantage",
            "description": "Split a dataset for training and testing.  Then apply XGBoost and XGBoostPredict to generate better models.",
            "subjects": [
                {
                    "id": 305,
                    "subject": "Python"
                },
                {
                    "id": 305,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/XGBoostandXGBPredict.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 321,
            "demo": "ZTest Function in Vantage",
            "description": "Determine if two population means are different when the population standard deviation or variance is known.",
            "subjects": [
                {
                    "id": 321,
                    "subject": "Python"
                },
                {
                    "id": 321,
                    "subject": "ClearScape Analytic Functions"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Recipes/ClearScape_Functions/ZTest.ipynb",
                    "label": "Python Version"
                }
            ]
        },
        {
            "id": 185,
            "demo": "tdplyr R Basics",
            "description": "Work through using the bgasics of the Teradata R package, tdplyr",
            "subjects": [
                {
                    "id": 185,
                    "subject": "Developer Information"
                },
                {
                    "id": 185,
                    "subject": "R"
                }
            ],
            "links": [
                {
                    "type": "notebook",
                    "url": "Getting_Started/tdplyr_R_Basics/tdplyr_R_Basics.ipynb",
                    "label": "R Version"
                }
            ]
        },
        {
            "id": 12,
            "demo": "teradataml Python Basics",
            "description": "Introduction to Teradataml package for Python including connecting to Vantage, Teradata DataFrames, data manipulation and export to Pandas.",
            "subjects": [
                {
                    "id": 12,
                    "subject": "Open-and-connected analytics"
                },
                {
                    "id": 12,
                    "subject": "Developer Information"
                },
                {
                    "id": 12,
                    "subject": "Python"
                }
            ],
            "links": [
                {
                    "type": "nbviewer",
                    "url": "https://nbviewer.org/github/Teradata/jupyter-demos/blob/80769bb2ee4e7ca5c2ee01bd7a51bd35f2c56891/Getting_Started/teradataml_Python_Basics/Pop_teradataml_Python_Basics_Python.ipynb",
                    "label": "Read Only Python"
                },
                {
                    "type": "notebook",
                    "url": "Getting_Started/teradataml_Python_Basics/teradataml_Python_Basics_Python.ipynb",
                    "label": "Python Version"
                }
            ]
        }
    ]
}